{
  "stats": {
    "suites": 5,
    "tests": 110,
    "passes": 110,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-06T18:08:21.841Z",
    "end": "2022-01-06T18:08:21.932Z",
    "duration": 91,
    "testsRegistered": 110,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "142f6855-1203-4277-a383-0e4223ec4e74",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6efb766d-5f7c-4458-b292-6847204e54ee",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser-debug.spec.js",
          "file": "\\test\\parser-debug.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-5",
              "fullTitle": "Parser should parse json syntax-5",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=meta->'order'->'shipTo'->>'name eq 'Kari Driver'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "3a29a08c-0452-4ba5-9fde-78d3a4ee8ba9",
              "parentUUID": "6efb766d-5f7c-4458-b292-6847204e54ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a29a08c-0452-4ba5-9fde-78d3a4ee8ba9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cec9237f-b1a6-4081-b787-f804285905f9",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser-jsonb.spec.js",
          "file": "\\test\\parser-jsonb.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>fred , 'csonl')\"); // / or _ for column name",
              "err": {},
              "uuid": "9b6b3e82-b796-4022-80c1-0f38686997a6",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto_address->>'name' , 'ewis')\"); // / or _ for column name",
              "err": {},
              "uuid": "e59d2c40-a35a-4e50-abc1-ad2921e0c63a",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-x",
              "fullTitle": "Parser should parse json syntax-x",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$filter=contains(shipto->>'fred' , 'csonl')\"); // / or _ for column name\n}catch(err){\n  error = true;\n}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "ca8278b7-021a-404d-b7f9-df2bd44f3fca",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-2",
              "fullTitle": "Parser should parse json syntax-2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->'fred','csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "9a8cc93e-8977-40f4-b506-ef8655446474",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(ship_to->'fred'->'same','csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "a18ba3da-e50a-4ecb-a86c-f10396b73dfd",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3-5",
              "fullTitle": "Parser should parse json syntax-3-5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>'fred'->'same','csonl')\"); // / need to allow for singlequotes around\nconsole.log(ast);",
              "err": {},
              "uuid": "00be0ea1-7581-4811-a62a-6948077716e1",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>'fred' , 'csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "60a7a3c0-cd76-49ca-a1b0-cb8d422d1561",
              "parentUUID": "cec9237f-b1a6-4081-b787-f804285905f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b6b3e82-b796-4022-80c1-0f38686997a6",
            "e59d2c40-a35a-4e50-abc1-ad2921e0c63a",
            "ca8278b7-021a-404d-b7f9-df2bd44f3fca",
            "9a8cc93e-8977-40f4-b506-ef8655446474",
            "a18ba3da-e50a-4ecb-a86c-f10396b73dfd",
            "00be0ea1-7581-4811-a62a-6948077716e1",
            "60a7a3c0-cd76-49ca-a1b0-cb8d422d1561"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cde46abd-9f65-447f-9070-bdf23d864ead",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser-jsonc.spec.js",
          "file": "\\test\\parser-jsonc.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-1",
              "fullTitle": "Parser should parse json syntax-1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=jsonb(shipto->>fred->'same','csonl')\"); // / this works,\nvar ast = parser.query(\"$filter=contains(meta->body->custom_fields->>'rma_status', 'csonl')\"); // works\n//var ast = parser.query(\"$filter=contains(shipto->>'fred', 'csonl')\"); // / works!\n//var ast = parser.query(\"$filter=shipto->>'fred' ne 'csonl'\"); // / works!\n\n   // var ast = parser.query(\"$filter=shipto->[0]'fred'->>'address' ne 'csonl'\"); // / works!\n//console.log(ast);",
              "err": {},
              "uuid": "322b5779-7265-4777-a5cf-f4cae6879c47",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-2",
              "fullTitle": "Parser should parse json syntax-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->>'fred' eq 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "0c8ad08e-4ad3-4ae2-a5f2-23be4e4a0874",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->>'fred' ne 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "ae83fead-530a-4ac3-9c60-96f6e200c1ce",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->0-->'fred' ne 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "383ca7d5-f808-4727-8b23-d517af263400",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-5",
              "fullTitle": "Parser should parse json syntax-5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=meta->'order'->'shipTo'->>'name ne 'KariDriver'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "0f358ca5-8801-48c0-9aff-7b257d9bc0f8",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table-column_snake",
              "fullTitle": "Parser table-column_snake",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=bmsTicket_status eq 'Pending Customer'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "7e53614e-9cd4-43c7-a452-0cba2fd6c27a",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table-column_snake2",
              "fullTitle": "Parser table-column_snake2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=bmsticketorder_shipto_address__name eq 'Daniel McDonald'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "f4464da9-a35b-4c56-ad7d-25297115b71c",
              "parentUUID": "cde46abd-9f65-447f-9070-bdf23d864ead",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "322b5779-7265-4777-a5cf-f4cae6879c47",
            "0c8ad08e-4ad3-4ae2-a5f2-23be4e4a0874",
            "ae83fead-530a-4ac3-9c60-96f6e200c1ce",
            "383ca7d5-f808-4727-8b23-d517af263400",
            "0f358ca5-8801-48c0-9aff-7b257d9bc0f8",
            "7e53614e-9cd4-43c7-a452-0cba2fd6c27a",
            "f4464da9-a35b-4c56-ad7d-25297115b71c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a639f61a-fcab-4f79-8576-d016e179067f",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser.spec.js",
          "file": "\\test\\parser.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should instantiate odata parser",
              "fullTitle": "Parser should instantiate odata parser",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.filter(\"Categories/all(d:d/Title eq 'alma')\");\nexpect(\n  ast.value.value.value.value.next.value.value.predicate.value.value.right\n    .value\n).to.equal(\"Edm.String\");",
              "err": {},
              "uuid": "1faf43fb-60ef-48b8-bd9f-7e2af72d7120",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\nvar ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "361a6c28-c91c-409e-8fe5-71f255cbba09",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query Lambda Operators",
              "fullTitle": "Parser should parse query Lambda Operators",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\n// The request below returns People with Emails containing \"ll@contoso.com\". The Emails is a collection of primitive type string.\nvar ast = parser.query(\"$filter=Emails/any(s:endswith(s, 'contoso.com'))\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "f633d768-f079-479a-962a-e3f58ff96dee",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query Lambda Operators2",
              "fullTitle": "Parser should parse query Lambda Operators2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\n// The request below returns the friends of Me who have friends using \"Scott\" as their FirstName.\nvar ast = parser.query(\"$filter=Friends/any(f:f/FirstName eq 'Scott')\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "86c06c07-f294-4ae3-b7ee-df68344aef51",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=Title eq 'alma'\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "f781d109-612b-4b96-b055-f97188572532",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse multiple orderby params",
              "fullTitle": "Parser should parse multiple orderby params",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$orderby=foo,bar\");\nexpect(ast.value.options[0].value.items[0].raw).to.equal(\"foo\");\nexpect(ast.value.options[0].value.items[1].raw).to.equal(\"bar\");",
              "err": {},
              "uuid": "3db2fa45-3539-405b-981b-232845647a1f",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse custom query options",
              "fullTitle": "Parser should parse custom query options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"foo=123&bar=foobar\");\nexpect(ast.value.options[0].value.key).to.equal(\"foo\");\nexpect(ast.value.options[0].value.value).to.equal(\"123\");\nexpect(ast.value.options[1].value.key).to.equal(\"bar\");\nexpect(ast.value.options[1].value.value).to.equal(\"foobar\");",
              "err": {},
              "uuid": "35850cff-612f-47ae-b47f-d3353348cd50",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error parsing invalid custom query options",
              "fullTitle": "Parser should throw error parsing invalid custom query options",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$foo=123\");\n  error = true;\n}catch(err){}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "309f4ba0-ef1b-4b57-af9d-d89f62d7de3e",
              "parentUUID": "a639f61a-fcab-4f79-8576-d016e179067f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1faf43fb-60ef-48b8-bd9f-7e2af72d7120",
            "361a6c28-c91c-409e-8fe5-71f255cbba09",
            "f633d768-f079-479a-962a-e3f58ff96dee",
            "86c06c07-f294-4ae3-b7ee-df68344aef51",
            "f781d109-612b-4b96-b055-f97188572532",
            "3db2fa45-3539-405b-981b-232845647a1f",
            "35850cff-612f-47ae-b47f-d3353348cd50",
            "309f4ba0-ef1b-4b57-af9d-d89f62d7de3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
          "title": "Primitive literals from json",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\primitiveLiteral.spec.js",
          "file": "\\test\\primitiveLiteral.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "#0 should parse Binary with X: X'1a2B3c4D'",
              "fullTitle": "Primitive literals from json #0 should parse Binary with X: X'1a2B3c4D'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ce8f6404-8612-4440-bf0a-c48067318267",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#1 should parse Binary - empty: binary''",
              "fullTitle": "Primitive literals from json #1 should parse Binary - empty: binary''",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "84c1cc26-5324-4169-8def-56aebae391c7",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#2 should parse Binary - f: binary'Zg=='",
              "fullTitle": "Primitive literals from json #2 should parse Binary - f: binary'Zg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "82cba135-e8c1-4c7c-9021-6309b14d4e93",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#3 should parse Binary - f (pad character is optional): binary'Zg'",
              "fullTitle": "Primitive literals from json #3 should parse Binary - f (pad character is optional): binary'Zg'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "628bec20-2424-4be3-820f-c2f23d03ca94",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#4 should parse Binary - fo: binary'Zm8='",
              "fullTitle": "Primitive literals from json #4 should parse Binary - fo: binary'Zm8='",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b4732369-f12d-407d-87d6-0b4117589c86",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "fullTitle": "Primitive literals from json #5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "e3d47f3b-9a6e-4e74-b70c-ecc763daf9ca",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#6 should parse Binary - foo: binary'Zm9v'",
              "fullTitle": "Primitive literals from json #6 should parse Binary - foo: binary'Zm9v'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3642e3f6-42ea-4867-9ddf-07978ed35e00",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#7 should parse Binary - foob: binary'Zm9vYg=='",
              "fullTitle": "Primitive literals from json #7 should parse Binary - foob: binary'Zm9vYg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4fc8497a-f309-4b58-bc0a-3f56e10cd030",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#8 should parse Binary - fooba: binary'Zm9vYmE='",
              "fullTitle": "Primitive literals from json #8 should parse Binary - fooba: binary'Zm9vYmE='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "865656ba-33ba-4b49-ad8d-57fd59d8d7ce",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "fullTitle": "Primitive literals from json #9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "96f6fead-c5d9-4d45-9202-e3e2b3a237e3",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#10 should parse Date in URL or body: 2012-09-03",
              "fullTitle": "Primitive literals from json #10 should parse Date in URL or body: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7d563652-8cfd-4c22-9614-4c07c4451eb6",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#11 should parse Date: 2012-09-10",
              "fullTitle": "Primitive literals from json #11 should parse Date: 2012-09-10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bf894ee2-df47-4421-9af3-4465454a32cf",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#12 should parse Date: 2012-09-20",
              "fullTitle": "Primitive literals from json #12 should parse Date: 2012-09-20",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "951a7f91-1bc8-4653-92ad-f911589a867c",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#13 should parse Date: 2012-09-03",
              "fullTitle": "Primitive literals from json #13 should parse Date: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a59280d2-c889-4852-8948-e49542f470dc",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#14 should parse Date: year zero: 0000-01-01",
              "fullTitle": "Primitive literals from json #14 should parse Date: year zero: 0000-01-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c503a634-f754-4e54-905c-70644da5e3bb",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#15 should parse Date: negative: -10000-04-01",
              "fullTitle": "Primitive literals from json #15 should parse Date: negative: -10000-04-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "edb6bfce-1d66-4ded-b925-a859e0906550",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "fullTitle": "Primitive literals from json #16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8a940169-db57-4617-8864-b1af838f9d72",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "fullTitle": "Primitive literals from json #17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b3bd7a98-c399-45a7-8de7-0a1bbf3d6923",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "fullTitle": "Primitive literals from json #18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "376668b1-b34e-4887-ae87-81670b0d25c6",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "fullTitle": "Primitive literals from json #19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4db6d8b8-43df-4089-933f-afea3e3131c7",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "fullTitle": "Primitive literals from json #20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "dbea6584-8adc-458d-b1fc-7319b4c1a641",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "fullTitle": "Primitive literals from json #21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3e9dd3f6-74be-42d2-a3c9-6e2dd2d3e3c9",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "fullTitle": "Primitive literals from json #22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b2cf428a-15a1-4cf4-b5d2-8f0aea0e52f3",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "fullTitle": "Primitive literals from json #23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0910efb9-31cc-45f1-b89b-c6c544a549fd",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "fullTitle": "Primitive literals from json #24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8e21be5e-bf17-4491-8287-6a9fff212552",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "fullTitle": "Primitive literals from json #25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f0d2906a-8b63-4424-b377-56ee0dfc0da5",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "fullTitle": "Primitive literals from json #26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a218d792-3232-4457-8906-ace7068ae9a7",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#27 should parse Decimal: 3.14",
              "fullTitle": "Primitive literals from json #27 should parse Decimal: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cef672fa-7193-4238-9a51-adaea3d24ea0",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#28 should parse Duration in body: P6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #28 should parse Duration in body: P6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b2300b20-9901-4633-8d29-5cc42a10ea1b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5f9036f3-2238-4885-b465-c2a891afb4bd",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bc8c8566-d8df-4c69-be61-db7d7e414552",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "fullTitle": "Primitive literals from json #31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ae4370e7-346e-4e27-aa2c-55c516798156",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#32 should parse Decimal: integer: -2",
              "fullTitle": "Primitive literals from json #32 should parse Decimal: integer: -2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f24eaba9-a868-4b78-aa93-b256aed192af",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#33 should parse Decimal: integer: +42.",
              "fullTitle": "Primitive literals from json #33 should parse Decimal: integer: +42.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "73e60fa4-7c21-43e7-846a-530aff393bda",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#34 should parse Decimal: no digit before decimal point: .1",
              "fullTitle": "Primitive literals from json #34 should parse Decimal: no digit before decimal point: .1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7cdb1a0e-e6e5-42ea-bb7f-2a27971e953d",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#35 should parse Decimal in URL: 3.14",
              "fullTitle": "Primitive literals from json #35 should parse Decimal in URL: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0d30c059-67f8-4365-95db-a475fa35e26b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#36 should parse Double: 3.14",
              "fullTitle": "Primitive literals from json #36 should parse Double: 3.14",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0402e7e7-7a05-4f83-a449-e57781ddf51f",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#37 should parse Double with exponent: -0.314e1",
              "fullTitle": "Primitive literals from json #37 should parse Double with exponent: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8840bb97-2d16-46bd-afc2-4baf00f1a2b7",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#38 should parse Negative infinity: -INF",
              "fullTitle": "Primitive literals from json #38 should parse Negative infinity: -INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "41165be9-30a7-4d14-9872-5799bc74e2aa",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#39 should parse Positive infinity: INF",
              "fullTitle": "Primitive literals from json #39 should parse Positive infinity: INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "56d5d796-6361-4bc7-b7bc-9cd604c0f2d2",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#40 should parse Not a Number: NaN",
              "fullTitle": "Primitive literals from json #40 should parse Not a Number: NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b6612a90-680f-4042-91d3-dd933351cc96",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#41 should parse Double in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #41 should parse Double in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "e4c4a1d5-fff2-4986-908b-5a26c35f123b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#42 should parse Single in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #42 should parse Single in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "76b56972-06b2-462e-83b1-406aaea59446",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#43 should parse Byte: 255",
              "fullTitle": "Primitive literals from json #43 should parse Byte: 255",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4fa5a8fe-7386-48b3-9063-17eb54220b0b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#44 should parse SByte: -128",
              "fullTitle": "Primitive literals from json #44 should parse SByte: -128",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a5b18728-1184-4cf9-a1a0-c0a136691aef",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#45 should parse Int16: +32000",
              "fullTitle": "Primitive literals from json #45 should parse Int16: +32000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "728872d6-4165-4ab8-9bc5-505a1b89f80d",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#46 should parse Int32: -2000000000",
              "fullTitle": "Primitive literals from json #46 should parse Int32: -2000000000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "881a9070-76b5-476f-b413-9b7387876e35",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#47 should parse Int64: 1234567890123456789",
              "fullTitle": "Primitive literals from json #47 should parse Int64: 1234567890123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ffbc5102-2e1c-43d5-bada-7a007e21a804",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#48 should parse Null: unqualified: null",
              "fullTitle": "Primitive literals from json #48 should parse Null: unqualified: null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "25c7bfc0-f941-44c2-a49f-3dc4be2f01ec",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "fullTitle": "Primitive literals from json #49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5aed27b2-d7cd-4201-bf39-f3575f5ab68b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#50 should parse String: 'O''Neil'",
              "fullTitle": "Primitive literals from json #50 should parse String: 'O''Neil'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3b7f40c1-2f1c-427f-b5d7-e381ce3b028d",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#51 should parse String: %27O'%27Neil'",
              "fullTitle": "Primitive literals from json #51 should parse String: %27O'%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a91ae19c-c9d0-49fa-aea5-94f3327df084",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#52 should parse String: 'O'Neil'",
              "fullTitle": "Primitive literals from json #52 should parse String: 'O'Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "e3db3a42-440d-4a5b-915b-52902ce26737",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#53 should parse String: 'O%27Neil'",
              "fullTitle": "Primitive literals from json #53 should parse String: 'O%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "37553489-cc01-4a7c-8504-4f9e48acedbc",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#54 should parse String: '%26%28'",
              "fullTitle": "Primitive literals from json #54 should parse String: '%26%28'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c9dfc029-df0d-4142-9f71-6b3f0eeed74b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#55 should parse primitive value in request body - enumeration member: Yellow",
              "fullTitle": "Primitive literals from json #55 should parse primitive value in request body - enumeration member: Yellow",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c35f88f2-3527-4945-84ff-7f1d74643aab",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "fullTitle": "Primitive literals from json #56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5c354ff7-1841-4658-9b27-e8eab3ac380d",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#57 should parse primitive value in request body - integer: 0123456789",
              "fullTitle": "Primitive literals from json #57 should parse primitive value in request body - integer: 0123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "167cb593-5b93-4c1b-82c3-4430e98dea98",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "30d46732-2b2b-4df8-b2ef-e58601c6351a",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "fullTitle": "Primitive literals from json #59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a39ad60c-431a-46a9-9fc8-84c0e0adf4f5",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "fullTitle": "Primitive literals from json #60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "65602ecd-e59a-4731-8a9a-1f3ff1e6455b",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#61 should parse Key: 'Hugo''s%20Tavern'",
              "fullTitle": "Primitive literals from json #61 should parse Key: 'Hugo''s%20Tavern'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f42cd7a8-007d-48c1-8502-2ae2ffb8af34",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "642fc2c1-2e43-4fc9-be21-4afd68a0b4b6",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "31fb3ca6-f331-446d-a36a-b6f15c46b6e6",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "fullTitle": "Primitive literals from json #64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a3f87c79-e5a9-4e4d-ba52-88e452e0d9b8",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#65 should parse TimeOfDay: 11:22:33",
              "fullTitle": "Primitive literals from json #65 should parse TimeOfDay: 11:22:33",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1394ed15-b49e-439b-a550-811bee593597",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#66 should parse TimeOfDay: no seconds: 11:22",
              "fullTitle": "Primitive literals from json #66 should parse TimeOfDay: no seconds: 11:22",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "29fe605c-8cd6-465e-a0f4-b8d096f7ac44",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "fullTitle": "Primitive literals from json #67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "609be98c-c5a2-497e-ad0e-661999dad9a4",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#68 should parse TimeOfDay: 24:00: 24:00:00",
              "fullTitle": "Primitive literals from json #68 should parse TimeOfDay: 24:00: 24:00:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "862103c7-b6d6-4475-a39c-a5422012457e",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "fullTitle": "Primitive literals from json #69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f3682166-36b4-4980-94d4-7542b5394a10",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "fullTitle": "Primitive literals from json #70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2ac97246-6fee-47fd-9502-bc33000306a6",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "716e090b-0ec1-4357-9dcd-7a472c9a4428",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9870ad4a-d58e-4548-838b-878abda8c705",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "131d2660-7684-4e4a-b257-08ca127a84cc",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cb6389ad-86c7-4889-9beb-715d2cfefabf",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "aa084c38-1c0b-4c4d-ad17-0097c09d5d7e",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c4ef001f-4fa2-4081-98ee-84bc95b8917a",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bf3c2b21-ebb5-4350-87c5-69daea09ccfc",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d986f0be-a721-4c9f-b087-e44032a67cbe",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "babfe377-81c6-44c6-b943-286bd2ccc7c2",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f9c5b6c3-3575-4864-80c0-ef1f0d77fbde",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f55a1fa7-52db-4de7-a4ae-c0d1f77ae5af",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "70b66049-ad43-4e35-8d5d-b14b9ae7c51d",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "35d2a88c-d44a-45b0-b91a-2366930baf28",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bf651e31-6714-41b3-92a2-c2ed14a87389",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "65fdc94e-af01-496b-bf59-0635426a7108",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f66f9d9b-a8df-42b1-810c-e38056b730c5",
              "parentUUID": "0012e62b-4a57-498c-9a60-53ed1c4181b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce8f6404-8612-4440-bf0a-c48067318267",
            "84c1cc26-5324-4169-8def-56aebae391c7",
            "82cba135-e8c1-4c7c-9021-6309b14d4e93",
            "628bec20-2424-4be3-820f-c2f23d03ca94",
            "b4732369-f12d-407d-87d6-0b4117589c86",
            "e3d47f3b-9a6e-4e74-b70c-ecc763daf9ca",
            "3642e3f6-42ea-4867-9ddf-07978ed35e00",
            "4fc8497a-f309-4b58-bc0a-3f56e10cd030",
            "865656ba-33ba-4b49-ad8d-57fd59d8d7ce",
            "96f6fead-c5d9-4d45-9202-e3e2b3a237e3",
            "7d563652-8cfd-4c22-9614-4c07c4451eb6",
            "bf894ee2-df47-4421-9af3-4465454a32cf",
            "951a7f91-1bc8-4653-92ad-f911589a867c",
            "a59280d2-c889-4852-8948-e49542f470dc",
            "c503a634-f754-4e54-905c-70644da5e3bb",
            "edb6bfce-1d66-4ded-b925-a859e0906550",
            "8a940169-db57-4617-8864-b1af838f9d72",
            "b3bd7a98-c399-45a7-8de7-0a1bbf3d6923",
            "376668b1-b34e-4887-ae87-81670b0d25c6",
            "4db6d8b8-43df-4089-933f-afea3e3131c7",
            "dbea6584-8adc-458d-b1fc-7319b4c1a641",
            "3e9dd3f6-74be-42d2-a3c9-6e2dd2d3e3c9",
            "b2cf428a-15a1-4cf4-b5d2-8f0aea0e52f3",
            "0910efb9-31cc-45f1-b89b-c6c544a549fd",
            "8e21be5e-bf17-4491-8287-6a9fff212552",
            "f0d2906a-8b63-4424-b377-56ee0dfc0da5",
            "a218d792-3232-4457-8906-ace7068ae9a7",
            "cef672fa-7193-4238-9a51-adaea3d24ea0",
            "b2300b20-9901-4633-8d29-5cc42a10ea1b",
            "5f9036f3-2238-4885-b465-c2a891afb4bd",
            "bc8c8566-d8df-4c69-be61-db7d7e414552",
            "ae4370e7-346e-4e27-aa2c-55c516798156",
            "f24eaba9-a868-4b78-aa93-b256aed192af",
            "73e60fa4-7c21-43e7-846a-530aff393bda",
            "7cdb1a0e-e6e5-42ea-bb7f-2a27971e953d",
            "0d30c059-67f8-4365-95db-a475fa35e26b",
            "0402e7e7-7a05-4f83-a449-e57781ddf51f",
            "8840bb97-2d16-46bd-afc2-4baf00f1a2b7",
            "41165be9-30a7-4d14-9872-5799bc74e2aa",
            "56d5d796-6361-4bc7-b7bc-9cd604c0f2d2",
            "b6612a90-680f-4042-91d3-dd933351cc96",
            "e4c4a1d5-fff2-4986-908b-5a26c35f123b",
            "76b56972-06b2-462e-83b1-406aaea59446",
            "4fa5a8fe-7386-48b3-9063-17eb54220b0b",
            "a5b18728-1184-4cf9-a1a0-c0a136691aef",
            "728872d6-4165-4ab8-9bc5-505a1b89f80d",
            "881a9070-76b5-476f-b413-9b7387876e35",
            "ffbc5102-2e1c-43d5-bada-7a007e21a804",
            "25c7bfc0-f941-44c2-a49f-3dc4be2f01ec",
            "5aed27b2-d7cd-4201-bf39-f3575f5ab68b",
            "3b7f40c1-2f1c-427f-b5d7-e381ce3b028d",
            "a91ae19c-c9d0-49fa-aea5-94f3327df084",
            "e3db3a42-440d-4a5b-915b-52902ce26737",
            "37553489-cc01-4a7c-8504-4f9e48acedbc",
            "c9dfc029-df0d-4142-9f71-6b3f0eeed74b",
            "c35f88f2-3527-4945-84ff-7f1d74643aab",
            "5c354ff7-1841-4658-9b27-e8eab3ac380d",
            "167cb593-5b93-4c1b-82c3-4430e98dea98",
            "30d46732-2b2b-4df8-b2ef-e58601c6351a",
            "a39ad60c-431a-46a9-9fc8-84c0e0adf4f5",
            "65602ecd-e59a-4731-8a9a-1f3ff1e6455b",
            "f42cd7a8-007d-48c1-8502-2ae2ffb8af34",
            "642fc2c1-2e43-4fc9-be21-4afd68a0b4b6",
            "31fb3ca6-f331-446d-a36a-b6f15c46b6e6",
            "a3f87c79-e5a9-4e4d-ba52-88e452e0d9b8",
            "1394ed15-b49e-439b-a550-811bee593597",
            "29fe605c-8cd6-465e-a0f4-b8d096f7ac44",
            "609be98c-c5a2-497e-ad0e-661999dad9a4",
            "862103c7-b6d6-4475-a39c-a5422012457e",
            "f3682166-36b4-4980-94d4-7542b5394a10",
            "2ac97246-6fee-47fd-9502-bc33000306a6",
            "716e090b-0ec1-4357-9dcd-7a472c9a4428",
            "9870ad4a-d58e-4548-838b-878abda8c705",
            "131d2660-7684-4e4a-b257-08ca127a84cc",
            "cb6389ad-86c7-4889-9beb-715d2cfefabf",
            "aa084c38-1c0b-4c4d-ad17-0097c09d5d7e",
            "c4ef001f-4fa2-4081-98ee-84bc95b8917a",
            "bf3c2b21-ebb5-4350-87c5-69daea09ccfc",
            "d986f0be-a721-4c9f-b087-e44032a67cbe",
            "babfe377-81c6-44c6-b943-286bd2ccc7c2",
            "f9c5b6c3-3575-4864-80c0-ef1f0d77fbde",
            "f55a1fa7-52db-4de7-a4ae-c0d1f77ae5af",
            "70b66049-ad43-4e35-8d5d-b14b9ae7c51d",
            "35d2a88c-d44a-45b0-b91a-2366930baf28",
            "bf651e31-6714-41b3-92a2-c2ed14a87389",
            "65fdc94e-af01-496b-bf59-0635426a7108",
            "f66f9d9b-a8df-42b1-810c-e38056b730c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "index",
        "reportTitle": "JayStack OData V4 Parser"
      },
      "version": "5.2.0"
    }
  }
}