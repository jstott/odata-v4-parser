{
  "stats": {
    "suites": 4,
    "tests": 108,
    "passes": 108,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-06T16:14:45.544Z",
    "end": "2022-01-06T16:14:45.628Z",
    "duration": 84,
    "testsRegistered": 108,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "deab1dac-9496-4e79-8452-3b3155c2325a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1b42db06-ba48-45e7-92fb-e1da206224a2",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser-jsonb.spec.js",
          "file": "\\test\\parser-jsonb.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>fred , 'csonl')\"); // / or _ for column name",
              "err": {},
              "uuid": "abd2a05a-aa51-44cb-8918-53a53cb55827",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto_address->>'name' , 'ewis')\"); // / or _ for column name",
              "err": {},
              "uuid": "38a0602c-4393-4521-b1c4-4950b9bb0060",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-x",
              "fullTitle": "Parser should parse json syntax-x",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$filter=contains(shipto->>'fred' , 'csonl')\"); // / or _ for column name\n}catch(err){\n  error = true;\n}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "c21d6e65-215b-415f-ae8c-e25671cdf317",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-2",
              "fullTitle": "Parser should parse json syntax-2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->'fred','csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "a500ec8d-f191-4275-aeca-be11714b60f2",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(ship_to->'fred'->'same','csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "30ded952-90bb-49cd-843e-a9e589a14e2a",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3-5",
              "fullTitle": "Parser should parse json syntax-3-5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>'fred'->'same','csonl')\"); // / need to allow for singlequotes around\nconsole.log(ast);",
              "err": {},
              "uuid": "a2192f93-3473-4073-b7c7-1acd4b069cac",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>'fred' , 'csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "96a62602-0fb2-4a1a-a52e-627acf761bef",
              "parentUUID": "1b42db06-ba48-45e7-92fb-e1da206224a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "abd2a05a-aa51-44cb-8918-53a53cb55827",
            "38a0602c-4393-4521-b1c4-4950b9bb0060",
            "c21d6e65-215b-415f-ae8c-e25671cdf317",
            "a500ec8d-f191-4275-aeca-be11714b60f2",
            "30ded952-90bb-49cd-843e-a9e589a14e2a",
            "a2192f93-3473-4073-b7c7-1acd4b069cac",
            "96a62602-0fb2-4a1a-a52e-627acf761bef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser-jsonc.spec.js",
          "file": "\\test\\parser-jsonc.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-1",
              "fullTitle": "Parser should parse json syntax-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=jsonb(shipto->>fred->'same','csonl')\"); // / this works,\nvar ast = parser.query(\"$filter=contains(meta->body->custom_fields->>'rma_status', 'csonl')\"); // works\n//var ast = parser.query(\"$filter=contains(shipto->>'fred', 'csonl')\"); // / works!\n//var ast = parser.query(\"$filter=shipto->>'fred' ne 'csonl'\"); // / works!\n\n   // var ast = parser.query(\"$filter=shipto->[0]'fred'->>'address' ne 'csonl'\"); // / works!\n//console.log(ast);",
              "err": {},
              "uuid": "e55466ff-727c-478d-9eba-1454862cc6a6",
              "parentUUID": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-2",
              "fullTitle": "Parser should parse json syntax-2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->>'fred' eq 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "13ff88cf-ffc4-4ead-a57b-4efab8cccb28",
              "parentUUID": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->>'fred' ne 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "0169b2e9-aef1-45b0-be33-e851f9290888",
              "parentUUID": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->0-->'fred' ne 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "e20f16ee-c80c-496c-a726-b65e1190736d",
              "parentUUID": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table-column_snake",
              "fullTitle": "Parser table-column_snake",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=bmsTicket_status eq 'Pending Customer'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "e11afa24-a8c9-4f99-9320-dd65a880ad2d",
              "parentUUID": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table-column_snake2",
              "fullTitle": "Parser table-column_snake2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=bmsticketorder_shipto_address__name eq 'Daniel McDonald'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "0fa3b044-c5c4-4e3f-9748-20558ac1f454",
              "parentUUID": "de0e467a-9e4a-4f31-b968-b365715ed6f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e55466ff-727c-478d-9eba-1454862cc6a6",
            "13ff88cf-ffc4-4ead-a57b-4efab8cccb28",
            "0169b2e9-aef1-45b0-be33-e851f9290888",
            "e20f16ee-c80c-496c-a726-b65e1190736d",
            "e11afa24-a8c9-4f99-9320-dd65a880ad2d",
            "0fa3b044-c5c4-4e3f-9748-20558ac1f454"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser.spec.js",
          "file": "\\test\\parser.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should instantiate odata parser",
              "fullTitle": "Parser should instantiate odata parser",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.filter(\"Categories/all(d:d/Title eq 'alma')\");\nexpect(\n  ast.value.value.value.value.next.value.value.predicate.value.value.right\n    .value\n).to.equal(\"Edm.String\");",
              "err": {},
              "uuid": "90e6ed5b-b49e-43c5-ac6b-4201e7f1b007",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\nvar ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "15e3a5fe-3abf-4109-83be-8dfc7c418afc",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query Lambda Operators",
              "fullTitle": "Parser should parse query Lambda Operators",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\n// The request below returns People with Emails containing \"ll@contoso.com\". The Emails is a collection of primitive type string.\nvar ast = parser.query(\"$filter=Emails/any(s:endswith(s, 'contoso.com'))\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "ba6c8989-4e8d-44b8-9b9b-41b77f135d2a",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query Lambda Operators2",
              "fullTitle": "Parser should parse query Lambda Operators2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\n// The request below returns the friends of Me who have friends using \"Scott\" as their FirstName.\nvar ast = parser.query(\"$filter=Friends/any(f:f/FirstName eq 'Scott')\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "5aa343e4-92a6-4b70-82ee-13719eb381b5",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=Title eq 'alma'\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "d5b32136-1f24-46b2-bbf6-10406b5c4c58",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse multiple orderby params",
              "fullTitle": "Parser should parse multiple orderby params",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$orderby=foo,bar\");\nexpect(ast.value.options[0].value.items[0].raw).to.equal(\"foo\");\nexpect(ast.value.options[0].value.items[1].raw).to.equal(\"bar\");",
              "err": {},
              "uuid": "6b14a226-a76d-43eb-a5b3-49156ec31ca7",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse custom query options",
              "fullTitle": "Parser should parse custom query options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"foo=123&bar=foobar\");\nexpect(ast.value.options[0].value.key).to.equal(\"foo\");\nexpect(ast.value.options[0].value.value).to.equal(\"123\");\nexpect(ast.value.options[1].value.key).to.equal(\"bar\");\nexpect(ast.value.options[1].value.value).to.equal(\"foobar\");",
              "err": {},
              "uuid": "f88fe1dc-5ef0-4a2c-8e52-d7661a8bda71",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error parsing invalid custom query options",
              "fullTitle": "Parser should throw error parsing invalid custom query options",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$foo=123\");\n  error = true;\n}catch(err){}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "128f13f6-d719-4748-b7eb-b249be8faa4a",
              "parentUUID": "a30f54b6-a6d2-4d17-8fef-df402ac7602e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90e6ed5b-b49e-43c5-ac6b-4201e7f1b007",
            "15e3a5fe-3abf-4109-83be-8dfc7c418afc",
            "ba6c8989-4e8d-44b8-9b9b-41b77f135d2a",
            "5aa343e4-92a6-4b70-82ee-13719eb381b5",
            "d5b32136-1f24-46b2-bbf6-10406b5c4c58",
            "6b14a226-a76d-43eb-a5b3-49156ec31ca7",
            "f88fe1dc-5ef0-4a2c-8e52-d7661a8bda71",
            "128f13f6-d719-4748-b7eb-b249be8faa4a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
          "title": "Primitive literals from json",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\primitiveLiteral.spec.js",
          "file": "\\test\\primitiveLiteral.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "#0 should parse Binary with X: X'1a2B3c4D'",
              "fullTitle": "Primitive literals from json #0 should parse Binary with X: X'1a2B3c4D'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5559db50-d5dc-4eab-8dff-97601888113a",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#1 should parse Binary - empty: binary''",
              "fullTitle": "Primitive literals from json #1 should parse Binary - empty: binary''",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7a0c35ad-b18f-494e-877a-831c943fd2bd",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#2 should parse Binary - f: binary'Zg=='",
              "fullTitle": "Primitive literals from json #2 should parse Binary - f: binary'Zg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f164c8b8-d304-410c-a6c6-d7feb300f60b",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#3 should parse Binary - f (pad character is optional): binary'Zg'",
              "fullTitle": "Primitive literals from json #3 should parse Binary - f (pad character is optional): binary'Zg'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "77b77c5e-d36e-49b3-a5aa-8064513a062a",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#4 should parse Binary - fo: binary'Zm8='",
              "fullTitle": "Primitive literals from json #4 should parse Binary - fo: binary'Zm8='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "959cd581-b482-460f-b378-d14cb6d45c88",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "fullTitle": "Primitive literals from json #5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bdc41cd7-c25f-4a99-9f7d-b8c504f469c5",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#6 should parse Binary - foo: binary'Zm9v'",
              "fullTitle": "Primitive literals from json #6 should parse Binary - foo: binary'Zm9v'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "819d89c1-d8cd-45d6-bef9-81d49829a3ed",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#7 should parse Binary - foob: binary'Zm9vYg=='",
              "fullTitle": "Primitive literals from json #7 should parse Binary - foob: binary'Zm9vYg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3e3aab9f-dab8-4054-88a8-001315748fc7",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#8 should parse Binary - fooba: binary'Zm9vYmE='",
              "fullTitle": "Primitive literals from json #8 should parse Binary - fooba: binary'Zm9vYmE='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "80a995af-dbe5-4c26-a7ed-4a7b2fb20692",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "fullTitle": "Primitive literals from json #9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3fbeed96-7c85-4bbc-ab86-b3f64b6e0285",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#10 should parse Date in URL or body: 2012-09-03",
              "fullTitle": "Primitive literals from json #10 should parse Date in URL or body: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b9ea8ab2-be03-4b99-96d5-cdcdd7f5e111",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#11 should parse Date: 2012-09-10",
              "fullTitle": "Primitive literals from json #11 should parse Date: 2012-09-10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "85e232fe-d15b-47f2-afd7-2579866270ab",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#12 should parse Date: 2012-09-20",
              "fullTitle": "Primitive literals from json #12 should parse Date: 2012-09-20",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "307af977-c04c-4d8c-a30d-683607ad1dd5",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#13 should parse Date: 2012-09-03",
              "fullTitle": "Primitive literals from json #13 should parse Date: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "87feda6f-a25e-4f65-b8d5-ae74d46b7023",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#14 should parse Date: year zero: 0000-01-01",
              "fullTitle": "Primitive literals from json #14 should parse Date: year zero: 0000-01-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6b6f003b-0804-4f5b-ba58-fc8d992699cb",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#15 should parse Date: negative: -10000-04-01",
              "fullTitle": "Primitive literals from json #15 should parse Date: negative: -10000-04-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a8dd2ce3-acae-4564-9816-99d6abe37188",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "fullTitle": "Primitive literals from json #16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8c663bbf-cb5c-4ea3-a62f-444e4cdbd208",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "fullTitle": "Primitive literals from json #17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4bd96dc3-00a6-4718-8899-4c345749f2b6",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "fullTitle": "Primitive literals from json #18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b4c52705-34c3-412e-b31f-71028ca2e908",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "fullTitle": "Primitive literals from json #19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7f1ac744-d51c-4350-9d9a-288eab457f5c",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "fullTitle": "Primitive literals from json #20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d5437e82-b42a-4f24-b26a-7dc52b5780be",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "fullTitle": "Primitive literals from json #21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "77bea56f-ac62-4ae3-aeb1-e756ceb41e26",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "fullTitle": "Primitive literals from json #22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1d603d5e-64ac-40e7-ba94-1182541cf8c4",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "fullTitle": "Primitive literals from json #23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2755daac-f463-4261-9908-b72f6dca99d7",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "fullTitle": "Primitive literals from json #24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cf8fb716-a62c-40cf-8494-725b09610668",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "fullTitle": "Primitive literals from json #25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f323405a-bb2a-4b7b-92f7-1fc926bd99e0",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "fullTitle": "Primitive literals from json #26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "59c4c37c-5f4c-43ff-a89e-2ea60fdd10bf",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#27 should parse Decimal: 3.14",
              "fullTitle": "Primitive literals from json #27 should parse Decimal: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d42418e3-a15f-49f0-834b-53e330c4c963",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#28 should parse Duration in body: P6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #28 should parse Duration in body: P6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "05747578-233d-4597-9c16-bffe398090b0",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "30689600-b533-4557-a403-3ff646cb5d55",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "41b7ea50-1cce-4d39-9b76-8286af73c0e3",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "fullTitle": "Primitive literals from json #31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5288aca2-896e-4c0e-a220-b0e0b48fd267",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#32 should parse Decimal: integer: -2",
              "fullTitle": "Primitive literals from json #32 should parse Decimal: integer: -2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "691ccc0f-cab6-4874-b030-f2dd47996f89",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#33 should parse Decimal: integer: +42.",
              "fullTitle": "Primitive literals from json #33 should parse Decimal: integer: +42.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b715c3ad-b87b-4a85-8cbd-aaa394b86395",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#34 should parse Decimal: no digit before decimal point: .1",
              "fullTitle": "Primitive literals from json #34 should parse Decimal: no digit before decimal point: .1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "64cbc376-e2ef-4ecb-9ad3-fabdca637e4d",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#35 should parse Decimal in URL: 3.14",
              "fullTitle": "Primitive literals from json #35 should parse Decimal in URL: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bdf6296b-1565-4058-a49a-5d2b3dc78ea4",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#36 should parse Double: 3.14",
              "fullTitle": "Primitive literals from json #36 should parse Double: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2e210862-298a-4ee5-96cb-90963594e34b",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#37 should parse Double with exponent: -0.314e1",
              "fullTitle": "Primitive literals from json #37 should parse Double with exponent: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b818b750-1048-4861-bf93-59a4fea51cb3",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#38 should parse Negative infinity: -INF",
              "fullTitle": "Primitive literals from json #38 should parse Negative infinity: -INF",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "edc2f49e-1245-42c6-916b-3b67e9b0ca4d",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#39 should parse Positive infinity: INF",
              "fullTitle": "Primitive literals from json #39 should parse Positive infinity: INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "807756bf-d64b-41a3-a392-7403c0b5670c",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#40 should parse Not a Number: NaN",
              "fullTitle": "Primitive literals from json #40 should parse Not a Number: NaN",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "01990aa2-7d7c-4cfd-a469-9d71a478eef0",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#41 should parse Double in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #41 should parse Double in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9a081ed5-2580-4970-8a05-1ca73be25a69",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#42 should parse Single in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #42 should parse Single in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "35045402-d3d3-41af-b934-0c0dfe71e516",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#43 should parse Byte: 255",
              "fullTitle": "Primitive literals from json #43 should parse Byte: 255",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f2732b61-a6fd-4314-9edd-9e245c711d55",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#44 should parse SByte: -128",
              "fullTitle": "Primitive literals from json #44 should parse SByte: -128",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3e725c18-5273-4726-a32b-f96dade7f210",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#45 should parse Int16: +32000",
              "fullTitle": "Primitive literals from json #45 should parse Int16: +32000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6eae25b4-47ab-43ae-9f85-e557cd3b626b",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#46 should parse Int32: -2000000000",
              "fullTitle": "Primitive literals from json #46 should parse Int32: -2000000000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "92543750-31dc-47b8-a6e4-350547b34991",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#47 should parse Int64: 1234567890123456789",
              "fullTitle": "Primitive literals from json #47 should parse Int64: 1234567890123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3fdee49d-ba85-469f-8014-77f502d1112e",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#48 should parse Null: unqualified: null",
              "fullTitle": "Primitive literals from json #48 should parse Null: unqualified: null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "20f053f1-2adb-476d-9327-6b0594db0e81",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "fullTitle": "Primitive literals from json #49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2480afcd-2f43-4396-90f1-092f9d0bd8c5",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#50 should parse String: 'O''Neil'",
              "fullTitle": "Primitive literals from json #50 should parse String: 'O''Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "48e95883-2d44-476b-96c5-ab5082f37afd",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#51 should parse String: %27O'%27Neil'",
              "fullTitle": "Primitive literals from json #51 should parse String: %27O'%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3341e178-829a-4dca-b14b-d3c3e82d9050",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#52 should parse String: 'O'Neil'",
              "fullTitle": "Primitive literals from json #52 should parse String: 'O'Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0cc22ac5-3801-482d-931b-b86bfb703769",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#53 should parse String: 'O%27Neil'",
              "fullTitle": "Primitive literals from json #53 should parse String: 'O%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f3e10973-db7a-4bab-97fd-59e81a5fb417",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#54 should parse String: '%26%28'",
              "fullTitle": "Primitive literals from json #54 should parse String: '%26%28'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "37880a38-4c8d-400c-aec8-330e343eff55",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#55 should parse primitive value in request body - enumeration member: Yellow",
              "fullTitle": "Primitive literals from json #55 should parse primitive value in request body - enumeration member: Yellow",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "31447509-97ca-4c04-9116-bfe6085fb37b",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "fullTitle": "Primitive literals from json #56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7a83e2c8-8493-45dc-94c7-54ec99eb763e",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#57 should parse primitive value in request body - integer: 0123456789",
              "fullTitle": "Primitive literals from json #57 should parse primitive value in request body - integer: 0123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2900ceab-44b9-44ac-9ade-9a692fe55cb9",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a726f4e6-9495-47b0-a2d0-5c47b95504d2",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "fullTitle": "Primitive literals from json #59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "37fd9f43-a13c-43f0-943e-53449b21a090",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "fullTitle": "Primitive literals from json #60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d8f59a13-df18-409c-a333-45600b04ffb6",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#61 should parse Key: 'Hugo''s%20Tavern'",
              "fullTitle": "Primitive literals from json #61 should parse Key: 'Hugo''s%20Tavern'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c2e20399-f835-4561-9fa4-f52ce689de3c",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4e71d16e-7e97-4f77-8a57-2803580c1298",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5b2a5f44-ee4d-440f-82b9-fedae5b9adbb",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "fullTitle": "Primitive literals from json #64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4f64f1db-a333-44f5-a5df-ddb9046325f9",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#65 should parse TimeOfDay: 11:22:33",
              "fullTitle": "Primitive literals from json #65 should parse TimeOfDay: 11:22:33",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "03711d60-8cbb-4e2a-9c74-3d0c4985e850",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#66 should parse TimeOfDay: no seconds: 11:22",
              "fullTitle": "Primitive literals from json #66 should parse TimeOfDay: no seconds: 11:22",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bc599144-3689-4abb-b78a-d032d9ec99d8",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "fullTitle": "Primitive literals from json #67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5c42b29c-c92e-4611-a70d-bf1b64c8a07a",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#68 should parse TimeOfDay: 24:00: 24:00:00",
              "fullTitle": "Primitive literals from json #68 should parse TimeOfDay: 24:00: 24:00:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f1d4228d-0da5-4b05-ae21-2e3b045e86cd",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "fullTitle": "Primitive literals from json #69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "168ef20e-587a-4b84-a2d4-6e98da5c06e2",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "fullTitle": "Primitive literals from json #70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cae49c70-e6c1-42cf-bef7-6de39344ef6d",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "66fd6896-f4cf-4e7f-9fe9-e8c55607975f",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6813aff7-11d7-412d-a887-56ddf4a91921",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "09fa1ff7-5bcc-4db0-b469-b82bf53b0c6d",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "72b97534-a054-412c-8b22-9b01a9a52973",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c032e4ec-8a8c-4828-8753-9d09f4f542e9",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3187ff9f-b9dd-48e4-bd81-f50decd050c5",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "35f697b1-23aa-4165-a4b3-650d10bf4351",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "39a6f1ce-fca4-4ee2-b1af-3544d9e9b6cf",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "dcbaa1cc-5d0f-41d0-acf6-878fb2cc1b6e",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d29d5616-f4df-4da9-a064-795fa82083db",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7c64efe2-612a-426b-8bfa-93eac96f10f7",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a46e2b27-0ba1-4921-adae-63cdf4d9c34e",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8a059b66-436b-4c90-b500-338dd15a10dc",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5de72155-1879-4ad1-b749-7c34f2f16f9d",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "846ee90d-5748-49d4-b7e4-53128cc13406",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b122e66f-6e90-4efa-8cb8-cadbf884d6d5",
              "parentUUID": "b883b99c-6ed7-4c80-ad1d-04eb3ae30397",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5559db50-d5dc-4eab-8dff-97601888113a",
            "7a0c35ad-b18f-494e-877a-831c943fd2bd",
            "f164c8b8-d304-410c-a6c6-d7feb300f60b",
            "77b77c5e-d36e-49b3-a5aa-8064513a062a",
            "959cd581-b482-460f-b378-d14cb6d45c88",
            "bdc41cd7-c25f-4a99-9f7d-b8c504f469c5",
            "819d89c1-d8cd-45d6-bef9-81d49829a3ed",
            "3e3aab9f-dab8-4054-88a8-001315748fc7",
            "80a995af-dbe5-4c26-a7ed-4a7b2fb20692",
            "3fbeed96-7c85-4bbc-ab86-b3f64b6e0285",
            "b9ea8ab2-be03-4b99-96d5-cdcdd7f5e111",
            "85e232fe-d15b-47f2-afd7-2579866270ab",
            "307af977-c04c-4d8c-a30d-683607ad1dd5",
            "87feda6f-a25e-4f65-b8d5-ae74d46b7023",
            "6b6f003b-0804-4f5b-ba58-fc8d992699cb",
            "a8dd2ce3-acae-4564-9816-99d6abe37188",
            "8c663bbf-cb5c-4ea3-a62f-444e4cdbd208",
            "4bd96dc3-00a6-4718-8899-4c345749f2b6",
            "b4c52705-34c3-412e-b31f-71028ca2e908",
            "7f1ac744-d51c-4350-9d9a-288eab457f5c",
            "d5437e82-b42a-4f24-b26a-7dc52b5780be",
            "77bea56f-ac62-4ae3-aeb1-e756ceb41e26",
            "1d603d5e-64ac-40e7-ba94-1182541cf8c4",
            "2755daac-f463-4261-9908-b72f6dca99d7",
            "cf8fb716-a62c-40cf-8494-725b09610668",
            "f323405a-bb2a-4b7b-92f7-1fc926bd99e0",
            "59c4c37c-5f4c-43ff-a89e-2ea60fdd10bf",
            "d42418e3-a15f-49f0-834b-53e330c4c963",
            "05747578-233d-4597-9c16-bffe398090b0",
            "30689600-b533-4557-a403-3ff646cb5d55",
            "41b7ea50-1cce-4d39-9b76-8286af73c0e3",
            "5288aca2-896e-4c0e-a220-b0e0b48fd267",
            "691ccc0f-cab6-4874-b030-f2dd47996f89",
            "b715c3ad-b87b-4a85-8cbd-aaa394b86395",
            "64cbc376-e2ef-4ecb-9ad3-fabdca637e4d",
            "bdf6296b-1565-4058-a49a-5d2b3dc78ea4",
            "2e210862-298a-4ee5-96cb-90963594e34b",
            "b818b750-1048-4861-bf93-59a4fea51cb3",
            "edc2f49e-1245-42c6-916b-3b67e9b0ca4d",
            "807756bf-d64b-41a3-a392-7403c0b5670c",
            "01990aa2-7d7c-4cfd-a469-9d71a478eef0",
            "9a081ed5-2580-4970-8a05-1ca73be25a69",
            "35045402-d3d3-41af-b934-0c0dfe71e516",
            "f2732b61-a6fd-4314-9edd-9e245c711d55",
            "3e725c18-5273-4726-a32b-f96dade7f210",
            "6eae25b4-47ab-43ae-9f85-e557cd3b626b",
            "92543750-31dc-47b8-a6e4-350547b34991",
            "3fdee49d-ba85-469f-8014-77f502d1112e",
            "20f053f1-2adb-476d-9327-6b0594db0e81",
            "2480afcd-2f43-4396-90f1-092f9d0bd8c5",
            "48e95883-2d44-476b-96c5-ab5082f37afd",
            "3341e178-829a-4dca-b14b-d3c3e82d9050",
            "0cc22ac5-3801-482d-931b-b86bfb703769",
            "f3e10973-db7a-4bab-97fd-59e81a5fb417",
            "37880a38-4c8d-400c-aec8-330e343eff55",
            "31447509-97ca-4c04-9116-bfe6085fb37b",
            "7a83e2c8-8493-45dc-94c7-54ec99eb763e",
            "2900ceab-44b9-44ac-9ade-9a692fe55cb9",
            "a726f4e6-9495-47b0-a2d0-5c47b95504d2",
            "37fd9f43-a13c-43f0-943e-53449b21a090",
            "d8f59a13-df18-409c-a333-45600b04ffb6",
            "c2e20399-f835-4561-9fa4-f52ce689de3c",
            "4e71d16e-7e97-4f77-8a57-2803580c1298",
            "5b2a5f44-ee4d-440f-82b9-fedae5b9adbb",
            "4f64f1db-a333-44f5-a5df-ddb9046325f9",
            "03711d60-8cbb-4e2a-9c74-3d0c4985e850",
            "bc599144-3689-4abb-b78a-d032d9ec99d8",
            "5c42b29c-c92e-4611-a70d-bf1b64c8a07a",
            "f1d4228d-0da5-4b05-ae21-2e3b045e86cd",
            "168ef20e-587a-4b84-a2d4-6e98da5c06e2",
            "cae49c70-e6c1-42cf-bef7-6de39344ef6d",
            "66fd6896-f4cf-4e7f-9fe9-e8c55607975f",
            "6813aff7-11d7-412d-a887-56ddf4a91921",
            "09fa1ff7-5bcc-4db0-b469-b82bf53b0c6d",
            "72b97534-a054-412c-8b22-9b01a9a52973",
            "c032e4ec-8a8c-4828-8753-9d09f4f542e9",
            "3187ff9f-b9dd-48e4-bd81-f50decd050c5",
            "35f697b1-23aa-4165-a4b3-650d10bf4351",
            "39a6f1ce-fca4-4ee2-b1af-3544d9e9b6cf",
            "dcbaa1cc-5d0f-41d0-acf6-878fb2cc1b6e",
            "d29d5616-f4df-4da9-a064-795fa82083db",
            "7c64efe2-612a-426b-8bfa-93eac96f10f7",
            "a46e2b27-0ba1-4921-adae-63cdf4d9c34e",
            "8a059b66-436b-4c90-b500-338dd15a10dc",
            "5de72155-1879-4ad1-b749-7c34f2f16f9d",
            "846ee90d-5748-49d4-b7e4-53128cc13406",
            "b122e66f-6e90-4efa-8cb8-cadbf884d6d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "index",
        "reportTitle": "JayStack OData V4 Parser"
      },
      "version": "5.2.0"
    }
  }
}