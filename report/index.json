{
  "stats": {
    "suites": 6,
    "tests": 136,
    "passes": 136,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-12T17:07:50.696Z",
    "end": "2023-02-12T17:07:50.923Z",
    "duration": 227,
    "testsRegistered": 136,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c66669a6-972f-4b12-b8c6-85f5326b6fc2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "14958cbc-2290-43e8-b831-1790188baacd",
          "title": "Parser",
          "fullFile": "/home/jstott/projects/jstott/odata-v4-parser/test/parser-debug.spec.js",
          "file": "/test/parser-debug.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-5",
              "fullTitle": "Parser should parse json syntax-5",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=meta->'order'->'shipTo'->>'name eq 'Kari Driver'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "548c09f9-0c65-4566-9433-6c1794945ad1",
              "parentUUID": "14958cbc-2290-43e8-b831-1790188baacd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "548c09f9-0c65-4566-9433-6c1794945ad1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "042bcc31-c889-4d61-8b0e-e943df34d462",
          "title": "Parser",
          "fullFile": "/home/jstott/projects/jstott/odata-v4-parser/test/parser-jsonb.spec.js",
          "file": "/test/parser-jsonb.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>fred , 'csonl')\"); // / or _ for column name",
              "err": {},
              "uuid": "f56a94ed-3226-4a04-98a3-db813c9c310d",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto_address->>'name' , 'ewis')\"); // / or _ for column name",
              "err": {},
              "uuid": "59ee91dd-898f-4942-80bc-a0ff54e975a3",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-x",
              "fullTitle": "Parser should parse json syntax-x",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$filter=contains(shipto->>'fred' , 'csonl')\"); // / or _ for column name\n}catch(err){\n  error = true;\n}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "8a2aae2b-ada8-437a-88e6-271845663614",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-2",
              "fullTitle": "Parser should parse json syntax-2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->'fred','csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "669b92db-b7cd-4563-9f8e-c7fd0d784e86",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(ship_to->'fred'->'same','csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "3b2fcb38-4d56-46f2-b36b-ec634a263012",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3-5",
              "fullTitle": "Parser should parse json syntax-3-5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>'fred'->'same','csonl')\"); // / need to allow for singlequotes around\nconsole.log(ast);",
              "err": {},
              "uuid": "a5cfb492-210e-441b-b0d2-4861c92f2566",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shipto->>'fred' , 'csonl')\"); // / or _ for column name\nconsole.log(ast);",
              "err": {},
              "uuid": "1b395dd4-3a18-4da7-ae62-b2136e13fb7a",
              "parentUUID": "042bcc31-c889-4d61-8b0e-e943df34d462",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f56a94ed-3226-4a04-98a3-db813c9c310d",
            "59ee91dd-898f-4942-80bc-a0ff54e975a3",
            "8a2aae2b-ada8-437a-88e6-271845663614",
            "669b92db-b7cd-4563-9f8e-c7fd0d784e86",
            "3b2fcb38-4d56-46f2-b36b-ec634a263012",
            "a5cfb492-210e-441b-b0d2-4861c92f2566",
            "1b395dd4-3a18-4da7-ae62-b2136e13fb7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
          "title": "Parser",
          "fullFile": "/home/jstott/projects/jstott/odata-v4-parser/test/parser-jsonc.spec.js",
          "file": "/test/parser-jsonc.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should parse json syntax-1",
              "fullTitle": "Parser should parse json syntax-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=jsonb(shipto->>fred->'same','csonl')\"); // / this works,\nvar ast = parser.query(\"$filter=contains(meta->body->custom_fields->>'rma_status', 'csonl')\"); // works\n//var ast = parser.query(\"$filter=contains(shipto->>'fred', 'csonl')\"); // / works!\n//var ast = parser.query(\"$filter=shipto->>'fred' ne 'csonl'\"); // / works!\n\n   // var ast = parser.query(\"$filter=shipto->[0]'fred'->>'address' ne 'csonl'\"); // / works!\n//console.log(ast);",
              "err": {},
              "uuid": "e30a34e0-64e8-4299-95f7-414c7bb1982b",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-2",
              "fullTitle": "Parser should parse json syntax-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->>'fred' eq 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "4fefa708-0130-483f-84c6-c8d95f4e7f5e",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-3",
              "fullTitle": "Parser should parse json syntax-3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->>'fred' ne 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "13506bbf-82d0-4596-a6c0-f2b1d302709c",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-4",
              "fullTitle": "Parser should parse json syntax-4",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=shipto->0-->'fred' ne 'csonl'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "41dddc63-0b43-4d87-b39c-7f373b7a9fa5",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse json syntax-5",
              "fullTitle": "Parser should parse json syntax-5",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=meta->'order'->'shipTo'->>'name ne 'KariDriver'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "816bfd76-c3db-411b-8f37-e17c0ea28caa",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table-column_snake",
              "fullTitle": "Parser table-column_snake",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=bmsTicket_status eq 'Pending Customer'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "3b924d85-6a77-45b8-9f44-c830475d0973",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table-column_snake2",
              "fullTitle": "Parser table-column_snake2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=bmsticketorder_shipto_address__name eq 'steve jopli'\"); // / works!\n   //console.log(ast);",
              "err": {},
              "uuid": "0ff5240f-2c26-4d12-9f35-a9b1ac4afaad",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains_jsonb",
              "fullTitle": "Parser contains_jsonb",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shiptoAddress->>'name','Samuel Cruz')\"); // works!\n //console.log(ast);",
              "err": {},
              "uuid": "6436cfaf-fbb3-45ed-854e-df8a43b6cf04",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains_spaces_jsonb_multiple",
              "fullTitle": "Parser contains_spaces_jsonb_multiple",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shiptoAddress->>'name','Air Camera') or contains(shiptoAddress->>'name','Air Camera') \"); // works!\n //console.log(ast);",
              "err": {},
              "uuid": "ef291056-9beb-4f96-9b7d-5a9d05de5215",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains_spaces_jsonb_multiple_with_Samuel_Cruze",
              "fullTitle": "Parser contains_spaces_jsonb_multiple_with_Samuel_Cruze",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=contains(shiptoAddress->>'name','Samuel Cruz') or contains(shiptoAddress->>'name','Samuel Cruz')\"); // works!\n //console.log(ast);",
              "err": {},
              "uuid": "14cf44f3-2f57-4d07-ab29-576e8babf065",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contains_spaces_full",
              "fullTitle": "Parser contains_spaces_full",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=(contains(shiptoAddress->>'name','Samuel Cruz') or contains(ticketNumber,'Samuel Cruz') or contains(orderId,'Samuel Cruz') or contains(accountName,'Samuel Cruz') or contains(name,'Samuel Cruz') or contains(partNumber,'Samuel Cruz') or contains(description,'Samuel Cruz') or contains(priority,'Samuel Cruz') or contains(subIssueType,'Samuel Cruz') or contains(outTrackingNumber,'Samuel Cruz') or contains(outShipStatus,'Samuel Cruz') or  contains(bmsticket__status,'Samuel Cruz') or contains(orderReason,'Samuel Cruz') or contains(primaryAssignee,'Samuel Cruz'))\");\n//\nvar ast = parser.query(\"$filter=( contains(bmsticketorder__meta->>'selectedBinLoc', 'charles john') or contains(ticketNumber,'charles john')  or contains(orderId,'charles john')  or contains(accountName,'charles john')  or contains(name,'charles john')  or contains(partNumber,'charles john')  or contains(description,'charles john')  or contains(priority,'charles john')  or contains(subIssueType,'charles john')  or contains(outTrackingNumber,'charles john')  or contains(outShipStatus,'charles john')  or contains(shiptoAddress->>'city','charles john')  or contains(shiptoAddress->>'state','charles john')  or contains(shiptoAddress->>'email','charles john')  or contains(shiptoAddress->>'name','charles john')  or contains(shiptoAddress->>'postalCode','charles john')  or contains(shiptoAddress->>'street','charles john')  or contains(shiptoAddress->>'country','charles john')  or contains(bmsticket__status,'charles john')  or contains(orderReason,'charles john')  or contains(primaryAssignee,'charles john')  )\"); // fails!\n //console.log(ast);",
              "err": {},
              "uuid": "2811aba3-9eb7-465c-bc95-2d3012bd0959",
              "parentUUID": "cbb3e53b-a2c0-4084-aef6-974e0c22a53a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e30a34e0-64e8-4299-95f7-414c7bb1982b",
            "4fefa708-0130-483f-84c6-c8d95f4e7f5e",
            "13506bbf-82d0-4596-a6c0-f2b1d302709c",
            "41dddc63-0b43-4d87-b39c-7f373b7a9fa5",
            "816bfd76-c3db-411b-8f37-e17c0ea28caa",
            "3b924d85-6a77-45b8-9f44-c830475d0973",
            "0ff5240f-2c26-4d12-9f35-a9b1ac4afaad",
            "6436cfaf-fbb3-45ed-854e-df8a43b6cf04",
            "ef291056-9beb-4f96-9b7d-5a9d05de5215",
            "14cf44f3-2f57-4d07-ab29-576e8babf065",
            "2811aba3-9eb7-465c-bc95-2d3012bd0959"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
          "title": "Parser",
          "fullFile": "/home/jstott/projects/jstott/odata-v4-parser/test/parser-jsond.spec.js",
          "file": "/test/parser-jsond.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "order_sample_0",
              "fullTitle": "Parser order_sample_0",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nlet query =\"( contains(bmsticketorder__meta->>'selectedBinLoc', 'charles john') or contains(ticketNumber,'charles john')  or contains(orderId,'charles john')  or contains(accountName,'charles john')  or contains(name,'charles john')  or contains(partNumber,'charles john')  or contains(description,'charles john')  or contains(priority,'charles john')  or contains(subIssueType,'charles john')  or contains(outTrackingNumber,'charles john')  or contains(outShipStatus,'charles john')  or contains(shiptoAddress->>'city','charles john')  or contains(shiptoAddress->>'state','charles john')  or contains(shiptoAddress->>'email','charles john')  or contains(shiptoAddress->>'name','charles john')  or contains(shiptoAddress->>'postalCode','charles john')  or contains(shiptoAddress->>'street','charles john')  or contains(shiptoAddress->>'country','charles john')  or contains(bmsticket__status,'charles john')  or contains(orderReason,'charles john')  or contains(primaryAssignee,'charles john')  )\"; \nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "a5fb5855-4684-4866-9d1b-343d39548856",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_1",
              "fullTitle": "Parser order_sample_1",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve jo') or contains(ticketNumber,'steve jo')  or contains(orderId,'steve jo')  or contains(accountName,'steve jo')  or contains(name,'steve jo')  or contains(partNumber,'steve jo')  or contains(description,'steve jo')  or contains(priority,'steve jo')  or contains(subIssueType,'steve jo')  or contains(outTrackingNumber,'steve jo')  or contains(outShipStatus,'steve jo')  or contains(shiptoAddress->>'city','steve jo')  or contains(shiptoAddress->>'state','steve jo')  or contains(shiptoAddress->>'email','steve jo')  or contains(shiptoAddress->>'name','steve jo')  or contains(shiptoAddress->>'postalCode','steve jo')  or contains(shiptoAddress->>'street','steve jo')  or contains(shiptoAddress->>'country','steve jo')  or contains(bmsticket__status,'steve jo')  or contains(orderReason,'steve jo')  or contains(primaryAssignee,'steve jo')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "6eba548c-d4b7-42df-a10a-4a49d6fb3ea0",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_2",
              "fullTitle": "Parser order_sample_2",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"(bmsticket__status ne 'Completed' and bmsticket__status ne 'Cancelled') and ( contains(bmsticketorder__meta->>'selectedBinLoc', 'Steve J') or contains(ticketNumber,'Steve J')  or contains(orderId,'Steve J')  or contains(accountName,'Steve J')  or contains(name,'Steve J')  or contains(partNumber,'Steve J')  or contains(description,'Steve J')  or contains(priority,'Steve J')  or contains(subIssueType,'Steve J')  or contains(outTrackingNumber,'Steve J')  or contains(outShipStatus,'Steve J')  or contains(shiptoAddress->>'city','Steve J')  or contains(shiptoAddress->>'state','Steve J')  or contains(shiptoAddress->>'email','Steve J')  or contains(shiptoAddress->>'name','Steve J')  or contains(shiptoAddress->>'postalCode','Steve J')  or contains(shiptoAddress->>'street','Steve J')  or contains(shiptoAddress->>'country','Steve J')  or contains(bmsticket__status,'Steve J')  or contains(orderReason,'Steve J')  or contains(primaryAssignee,'Steve J')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "4f19fe10-9349-4480-863f-f2bacd83ffd4",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_3",
              "fullTitle": "Parser order_sample_3",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"(bmsticket__status ne 'Completed' and bmsticket__status ne 'Cancelled') and ( contains(bmsticketorder__meta->>'selectedBinLoc', 'Steve Jo') or contains(ticketNumber,'Steve Jo')  or contains(orderId,'Steve Jo')  or contains(accountName,'Steve Jo')  or contains(name,'Steve Jo')  or contains(partNumber,'Steve Jo')  or contains(description,'Steve Jo')  or contains(priority,'Steve Jo')  or contains(subIssueType,'Steve Jo')  or contains(outTrackingNumber,'Steve Jo')  or contains(outShipStatus,'Steve Jo')  or contains(shiptoAddress->>'city','Steve Jo')  or contains(shiptoAddress->>'state','Steve Jo')  or contains(shiptoAddress->>'email','Steve Jo')  or contains(shiptoAddress->>'name','Steve Jo')  or contains(shiptoAddress->>'postalCode','Steve Jo')  or contains(shiptoAddress->>'street','Steve Jo')  or contains(shiptoAddress->>'country','Steve Jo')  or contains(bmsticket__status,'Steve Jo')  or contains(orderReason,'Steve Jo')  or contains(primaryAssignee,'Steve Jo')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "a21e37d1-9ac3-42d7-b767-acd1bfc65fc4",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_4",
              "fullTitle": "Parser order_sample_4",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"(bmsticket__status ne 'Completed' and bmsticket__status ne 'Cancelled') and ( contains(bmsticketorder__meta->>'selectedBinLoc', 'Steve Jop') or contains(ticketNumber,'Steve Jop')  or contains(orderId,'Steve Jop')  or contains(accountName,'Steve Jop')  or contains(name,'Steve Jop')  or contains(partNumber,'Steve Jop')  or contains(description,'Steve Jop')  or contains(priority,'Steve Jop')  or contains(subIssueType,'Steve Jop')  or contains(outTrackingNumber,'Steve Jop')  or contains(outShipStatus,'Steve Jop')  or contains(shiptoAddress->>'city','Steve Jop')  or contains(shiptoAddress->>'state','Steve Jop')  or contains(shiptoAddress->>'email','Steve Jop')  or contains(shiptoAddress->>'name','Steve Jop')  or contains(shiptoAddress->>'postalCode','Steve Jop')  or contains(shiptoAddress->>'street','Steve Jop')  or contains(shiptoAddress->>'country','Steve Jop')  or contains(bmsticket__status,'Steve Jop')  or contains(orderReason,'Steve Jop')  or contains(primaryAssignee,'Steve Jop')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "440fc097-297f-48f7-826d-2b97e220fd01",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_5",
              "fullTitle": "Parser order_sample_5",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"(bmsticket__status ne 'Completed' and bmsticket__status ne 'Cancelled') and ( contains(bmsticketorder__meta->>'selectedBinLoc', 'Steve Jopli') or contains(ticketNumber,'Steve Jopli')  or contains(orderId,'Steve Jopli')  or contains(accountName,'Steve Jopli')  or contains(name,'Steve Jopli')  or contains(partNumber,'Steve Jopli')  or contains(description,'Steve Jopli')  or contains(priority,'Steve Jopli')  or contains(subIssueType,'Steve Jopli')  or contains(outTrackingNumber,'Steve Jopli')  or contains(outShipStatus,'Steve Jopli')  or contains(shiptoAddress->>'city','Steve Jopli')  or contains(shiptoAddress->>'state','Steve Jopli')  or contains(shiptoAddress->>'email','Steve Jopli')  or contains(shiptoAddress->>'name','Steve Jopli')  or contains(shiptoAddress->>'postalCode','Steve Jopli')  or contains(shiptoAddress->>'street','Steve Jopli')  or contains(shiptoAddress->>'country','Steve Jopli')  or contains(bmsticket__status,'Steve Jopli')  or contains(orderReason,'Steve Jopli')  or contains(primaryAssignee,'Steve Jopli')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "8653251d-6798-436c-ac35-ba2d46149377",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_6",
              "fullTitle": "Parser order_sample_6",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"(bmsticket__status ne 'Completed' and bmsticket__status ne 'Cancelled') and ( contains(bmsticketorder__meta->>'selectedBinLoc', 'Steve Joplin') or contains(ticketNumber,'Steve Joplin')  or contains(orderId,'Steve Joplin')  or contains(accountName,'Steve Joplin')  or contains(name,'Steve Joplin')  or contains(partNumber,'Steve Joplin')  or contains(description,'Steve Joplin')  or contains(priority,'Steve Joplin')  or contains(subIssueType,'Steve Joplin')  or contains(outTrackingNumber,'Steve Joplin')  or contains(outShipStatus,'Steve Joplin')  or contains(shiptoAddress->>'city','Steve Joplin')  or contains(shiptoAddress->>'state','Steve Joplin')  or contains(shiptoAddress->>'email','Steve Joplin')  or contains(shiptoAddress->>'name','Steve Joplin')  or contains(shiptoAddress->>'postalCode','Steve Joplin')  or contains(shiptoAddress->>'street','Steve Joplin')  or contains(shiptoAddress->>'country','Steve Joplin')  or contains(bmsticket__status,'Steve Joplin')  or contains(orderReason,'Steve Joplin')  or contains(primaryAssignee,'Steve Joplin')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "f79a197c-02e5-40d4-bd5a-38d82a7e370b",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_7",
              "fullTitle": "Parser order_sample_7",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve jop') or contains(ticketNumber,'steve jop')  or contains(orderId,'steve jop')  or contains(accountName,'steve jop')  or contains(name,'steve jop')  or contains(partNumber,'steve jop')  or contains(description,'steve jop')  or contains(priority,'steve jop')  or contains(subIssueType,'steve jop')  or contains(outTrackingNumber,'steve jop')  or contains(outShipStatus,'steve jop')  or contains(shiptoAddress->>'city','steve jop')  or contains(shiptoAddress->>'state','steve jop')  or contains(shiptoAddress->>'email','steve jop')  or contains(shiptoAddress->>'name','steve jop')  or contains(shiptoAddress->>'postalCode','steve jop')  or contains(shiptoAddress->>'street','steve jop')  or contains(shiptoAddress->>'country','steve jop')  or contains(bmsticket__status,'steve jop')  or contains(orderReason,'steve jop')  or contains(primaryAssignee,'steve jop')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "5f55fbe9-6c3b-4de7-8fca-b01934ab5212",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_8",
              "fullTitle": "Parser order_sample_8",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve jo') or contains(ticketNumber,'steve jo')  or contains(orderId,'steve jo')  or contains(accountName,'steve jo')  or contains(name,'steve jo')  or contains(partNumber,'steve jo')  or contains(description,'steve jo')  or contains(priority,'steve jo')  or contains(subIssueType,'steve jo')  or contains(outTrackingNumber,'steve jo')  or contains(outShipStatus,'steve jo')  or contains(shiptoAddress->>'city','steve jo')  or contains(shiptoAddress->>'state','steve jo')  or contains(shiptoAddress->>'email','steve jo')  or contains(shiptoAddress->>'name','steve jo')  or contains(shiptoAddress->>'postalCode','steve jo')  or contains(shiptoAddress->>'street','steve jo')  or contains(shiptoAddress->>'country','steve jo')  or contains(bmsticket__status,'steve jo')  or contains(orderReason,'steve jo')  or contains(primaryAssignee,'steve jo')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "d38f8c6e-5c38-448a-9461-2014b045f909",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_9",
              "fullTitle": "Parser order_sample_9",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve job') or contains(ticketNumber,'steve job')  or contains(orderId,'steve job')  or contains(accountName,'steve job')  or contains(name,'steve job')  or contains(partNumber,'steve job')  or contains(description,'steve job')  or contains(priority,'steve job')  or contains(subIssueType,'steve job')  or contains(outTrackingNumber,'steve job')  or contains(outShipStatus,'steve job')  or contains(shiptoAddress->>'city','steve job')  or contains(shiptoAddress->>'state','steve job')  or contains(shiptoAddress->>'email','steve job')  or contains(shiptoAddress->>'name','steve job')  or contains(shiptoAddress->>'postalCode','steve job')  or contains(shiptoAddress->>'street','steve job')  or contains(shiptoAddress->>'country','steve job')  or contains(bmsticket__status,'steve job')  or contains(orderReason,'steve job')  or contains(primaryAssignee,'steve job')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "07af58fa-b6a9-4341-ac91-a83aa47fca7f",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_10",
              "fullTitle": "Parser order_sample_10",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve j') or contains(ticketNumber,'steve j')  or contains(orderId,'steve j')  or contains(accountName,'steve j')  or contains(name,'steve j')  or contains(partNumber,'steve j')  or contains(description,'steve j')  or contains(priority,'steve j')  or contains(subIssueType,'steve j')  or contains(outTrackingNumber,'steve j')  or contains(outShipStatus,'steve j')  or contains(shiptoAddress->>'city','steve j')  or contains(shiptoAddress->>'state','steve j')  or contains(shiptoAddress->>'email','steve j')  or contains(shiptoAddress->>'name','steve j')  or contains(shiptoAddress->>'postalCode','steve j')  or contains(shiptoAddress->>'street','steve j')  or contains(shiptoAddress->>'country','steve j')  or contains(bmsticket__status,'steve j')  or contains(orderReason,'steve j')  or contains(primaryAssignee,'steve j')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "677a8933-2798-46f7-84ff-3dcba31d5898",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_11",
              "fullTitle": "Parser order_sample_11",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nlet query = \"(contains(bmsticketorder__meta->>'selectedBinLoc', 'srjoplin@gmail.com>') or contains(ticketNumber,'srjoplin@gmail.com>')  or contains(orderId,'srjoplin@gmail.com>')  or contains(accountName,'srjoplin@gmail.com>')  or contains(name,'srjoplin@gmail.com>')  or contains(partNumber,'srjoplin@gmail.com>')  or contains(description,'srjoplin@gmail.com>')  or contains(priority,'srjoplin@gmail.com>')  or contains(subIssueType,'srjoplin@gmail.com>')  or contains(outTrackingNumber,'srjoplin@gmail.com>')  or contains(outShipStatus,'srjoplin@gmail.com>')  or contains(shiptoAddress->>'city','srjoplin@gmail.com>')  or contains(shiptoAddress->>'state','srjoplin@gmail.com>')  or contains(shiptoAddress->>'email','srjoplin@gmail.com>')  or contains(shiptoAddress->>'name','srjoplin@gmail.com>')  or contains(shiptoAddress->>'postalCode','srjoplin@gmail.com>')  or contains(shiptoAddress->>'street','srjoplin@gmail.com>')  or contains(shiptoAddress->>'country','srjoplin@gmail.com>')  or contains(bmsticket__status,'srjoplin@gmail.com>')  or contains(orderReason,'srjoplin@gmail.com>')  or contains(primaryAssignee,'srjoplin@gmail.com>'))\";\n//query = query.replace(\">'\",\"'\");\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter); \nexpect(ast.raw == filter).to.be.true;",
              "err": {},
              "uuid": "ee1e9983-31d9-4998-b675-ee4be8d71c61",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_12",
              "fullTitle": "Parser order_sample_12",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'srsrjoplin@gmail.com>') or contains(ticketNumber,'srsrjoplin@gmail.com>')  or contains(orderId,'srsrjoplin@gmail.com>')  or contains(accountName,'srsrjoplin@gmail.com>')  or contains(name,'srsrjoplin@gmail.com>')  or contains(partNumber,'srsrjoplin@gmail.com>')  or contains(description,'srsrjoplin@gmail.com>')  or contains(priority,'srsrjoplin@gmail.com>')  or contains(subIssueType,'srsrjoplin@gmail.com>')  or contains(outTrackingNumber,'srsrjoplin@gmail.com>')  or contains(outShipStatus,'srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'city','srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'state','srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'email','srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'name','srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'postalCode','srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'street','srsrjoplin@gmail.com>')  or contains(shiptoAddress->>'country','srsrjoplin@gmail.com>')  or contains(bmsticket__status,'srsrjoplin@gmail.com>')  or contains(orderReason,'srsrjoplin@gmail.com>')  or contains(primaryAssignee,'srsrjoplin@gmail.com>')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter); \nexpect(ast.raw == filter).to.be.true;\nconsole.log(ast.filter);",
              "err": {},
              "uuid": "ce48e9c5-94f4-4d6a-932b-9017091603ca",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_13",
              "fullTitle": "Parser order_sample_13",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'srjsrjoplin@gmail.com>') or contains(ticketNumber,'srjsrjoplin@gmail.com>')  or contains(orderId,'srjsrjoplin@gmail.com>')  or contains(accountName,'srjsrjoplin@gmail.com>')  or contains(name,'srjsrjoplin@gmail.com>')  or contains(partNumber,'srjsrjoplin@gmail.com>')  or contains(description,'srjsrjoplin@gmail.com>')  or contains(priority,'srjsrjoplin@gmail.com>')  or contains(subIssueType,'srjsrjoplin@gmail.com>')  or contains(outTrackingNumber,'srjsrjoplin@gmail.com>')  or contains(outShipStatus,'srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'city','srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'state','srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'email','srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'name','srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'postalCode','srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'street','srjsrjoplin@gmail.com>')  or contains(shiptoAddress->>'country','srjsrjoplin@gmail.com>')  or contains(bmsticket__status,'srjsrjoplin@gmail.com>')  or contains(orderReason,'srjsrjoplin@gmail.com>')  or contains(primaryAssignee,'srjsrjoplin@gmail.com>')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter); \nexpect(ast.raw == filter).to.be.true;",
              "err": {},
              "uuid": "fac5c402-90a9-4d24-8f4f-c5457f55ef5c",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_14",
              "fullTitle": "Parser order_sample_14",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve jo') or contains(ticketNumber,'steve jo')  or contains(orderId,'steve jo')  or contains(accountName,'steve jo')  or contains(name,'steve jo')  or contains(partNumber,'steve jo')  or contains(description,'steve jo')  or contains(priority,'steve jo')  or contains(subIssueType,'steve jo')  or contains(outTrackingNumber,'steve jo')  or contains(outShipStatus,'steve jo')  or contains(shiptoAddress->>'city','steve jo')  or contains(shiptoAddress->>'state','steve jo')  or contains(shiptoAddress->>'email','steve jo')  or contains(shiptoAddress->>'name','steve jo')  or contains(shiptoAddress->>'postalCode','steve jo')  or contains(shiptoAddress->>'street','steve jo')  or contains(shiptoAddress->>'country','steve jo')  or contains(bmsticket__status,'steve jo')  or contains(orderReason,'steve jo')  or contains(primaryAssignee,'steve jo')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter); \nexpect(ast.raw == filter).to.be.true;",
              "err": {},
              "uuid": "9e888b85-762f-466a-9109-27c2ed566f53",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_15",
              "fullTitle": "Parser order_sample_15",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve job') or contains(ticketNumber,'steve job')  or contains(orderId,'steve job')  or contains(accountName,'steve job')  or contains(name,'steve job')  or contains(partNumber,'steve job')  or contains(description,'steve job')  or contains(priority,'steve job')  or contains(subIssueType,'steve job')  or contains(outTrackingNumber,'steve job')  or contains(outShipStatus,'steve job')  or contains(shiptoAddress->>'city','steve job')  or contains(shiptoAddress->>'state','steve job')  or contains(shiptoAddress->>'email','steve job')  or contains(shiptoAddress->>'name','steve job')  or contains(shiptoAddress->>'postalCode','steve job')  or contains(shiptoAddress->>'street','steve job')  or contains(shiptoAddress->>'country','steve job')  or contains(bmsticket__status,'steve job')  or contains(orderReason,'steve job')  or contains(primaryAssignee,'steve job')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter); \nexpect(ast.raw == filter).to.be.true;",
              "err": {},
              "uuid": "0154dc33-a305-43e7-8d35-1d386416bdcc",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_16",
              "fullTitle": "Parser order_sample_16",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'steve j') or contains(ticketNumber,'steve j')  or contains(orderId,'steve j')  or contains(accountName,'steve j')  or contains(name,'steve j')  or contains(partNumber,'steve j')  or contains(description,'steve j')  or contains(priority,'steve j')  or contains(subIssueType,'steve j')  or contains(outTrackingNumber,'steve j')  or contains(outShipStatus,'steve j')  or contains(shiptoAddress->>'city','steve j')  or contains(shiptoAddress->>'state','steve j')  or contains(shiptoAddress->>'email','steve j')  or contains(shiptoAddress->>'name','steve j')  or contains(shiptoAddress->>'postalCode','steve j')  or contains(shiptoAddress->>'street','steve j')  or contains(shiptoAddress->>'country','steve j')  or contains(bmsticket__status,'steve j')  or contains(orderReason,'steve j')  or contains(primaryAssignee,'steve j')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "9696cda3-f468-45d4-9a28-e121876b6246",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_17",
              "fullTitle": "Parser order_sample_17",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'srjoplin@gmail.com srjoplin@gmail.com>') or contains(ticketNumber,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(orderId,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(accountName,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(name,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(partNumber,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(description,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(priority,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(subIssueType,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(outTrackingNumber,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(outShipStatus,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'city','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'state','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'email','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'name','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'postalCode','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'street','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(shiptoAddress->>'country','srjoplin@gmail.com srjoplin@gmail.com>')  or contains(bmsticket__status,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(orderReason,'srjoplin@gmail.com srjoplin@gmail.com>')  or contains(primaryAssignee,'srjoplin@gmail.com srjoplin@gmail.com>')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "db8142e6-dca1-4b24-99a5-f997dd3b9d12",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_18",
              "fullTitle": "Parser order_sample_18",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'LEOR GILLERMAN') or contains(ticketNumber,'LEOR GILLERMAN')  or contains(orderId,'LEOR GILLERMAN')  or contains(accountName,'LEOR GILLERMAN')  or contains(name,'LEOR GILLERMAN')  or contains(partNumber,'LEOR GILLERMAN')  or contains(description,'LEOR GILLERMAN')  or contains(priority,'LEOR GILLERMAN')  or contains(subIssueType,'LEOR GILLERMAN')  or contains(outTrackingNumber,'LEOR GILLERMAN')  or contains(outShipStatus,'LEOR GILLERMAN')  or contains(shiptoAddress->>'city','LEOR GILLERMAN')  or contains(shiptoAddress->>'state','LEOR GILLERMAN')  or contains(shiptoAddress->>'email','LEOR GILLERMAN')  or contains(shiptoAddress->>'name','LEOR GILLERMAN')  or contains(shiptoAddress->>'postalCode','LEOR GILLERMAN')  or contains(shiptoAddress->>'street','LEOR GILLERMAN')  or contains(shiptoAddress->>'country','LEOR GILLERMAN')  or contains(bmsticket__status,'LEOR GILLERMAN')  or contains(orderReason,'LEOR GILLERMAN')  or contains(primaryAssignee,'LEOR GILLERMAN')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "333e8592-f04f-484f-890e-e8be7ec2a1bf",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_19",
              "fullTitle": "Parser order_sample_19",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'Lisa Della Santina Wilsey') or contains(ticketNumber,'Lisa Della Santina Wilsey')  or contains(orderId,'Lisa Della Santina Wilsey')  or contains(accountName,'Lisa Della Santina Wilsey')  or contains(name,'Lisa Della Santina Wilsey')  or contains(partNumber,'Lisa Della Santina Wilsey')  or contains(description,'Lisa Della Santina Wilsey')  or contains(priority,'Lisa Della Santina Wilsey')  or contains(subIssueType,'Lisa Della Santina Wilsey')  or contains(outTrackingNumber,'Lisa Della Santina Wilsey')  or contains(outShipStatus,'Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'city','Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'state','Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'email','Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'name','Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'postalCode','Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'street','Lisa Della Santina Wilsey')  or contains(shiptoAddress->>'country','Lisa Della Santina Wilsey')  or contains(bmsticket__status,'Lisa Della Santina Wilsey')  or contains(orderReason,'Lisa Della Santina Wilsey')  or contains(primaryAssignee,'Lisa Della Santina Wilsey')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "60cae218-42ce-4d30-880f-ce1aa4d4412b",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_20",
              "fullTitle": "Parser order_sample_20",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"(bmsticket__status ne 'Completed' and bmsticket__status ne 'Cancelled') and ( contains(bmsticketorder__meta->>'selectedBinLoc', 'Abraham S') or contains(ticketNumber,'Abraham S')  or contains(orderId,'Abraham S')  or contains(accountName,'Abraham S')  or contains(name,'Abraham S')  or contains(partNumber,'Abraham S')  or contains(description,'Abraham S')  or contains(priority,'Abraham S')  or contains(subIssueType,'Abraham S')  or contains(outTrackingNumber,'Abraham S')  or contains(outShipStatus,'Abraham S')  or contains(shiptoAddress->>'city','Abraham S')  or contains(shiptoAddress->>'state','Abraham S')  or contains(shiptoAddress->>'email','Abraham S')  or contains(shiptoAddress->>'name','Abraham S')  or contains(shiptoAddress->>'postalCode','Abraham S')  or contains(shiptoAddress->>'street','Abraham S')  or contains(shiptoAddress->>'country','Abraham S')  or contains(bmsticket__status,'Abraham S')  or contains(orderReason,'Abraham S')  or contains(primaryAssignee,'Abraham S')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "27c14454-1249-4422-99dc-1f4455b18d7b",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "order_sample_21",
              "fullTitle": "Parser order_sample_21",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = \"( contains(bmsticketorder__meta->>'selectedBinLoc', 'Frank Dechellis') or contains(ticketNumber,'Frank Dechellis')  or contains(orderId,'Frank Dechellis')  or contains(accountName,'Frank Dechellis')  or contains(name,'Frank Dechellis')  or contains(partNumber,'Frank Dechellis')  or contains(description,'Frank Dechellis')  or contains(priority,'Frank Dechellis')  or contains(subIssueType,'Frank Dechellis')  or contains(outTrackingNumber,'Frank Dechellis')  or contains(outShipStatus,'Frank Dechellis')  or contains(shiptoAddress->>'city','Frank Dechellis')  or contains(shiptoAddress->>'state','Frank Dechellis')  or contains(shiptoAddress->>'email','Frank Dechellis')  or contains(shiptoAddress->>'name','Frank Dechellis')  or contains(shiptoAddress->>'postalCode','Frank Dechellis')  or contains(shiptoAddress->>'street','Frank Dechellis')  or contains(shiptoAddress->>'country','Frank Dechellis')  or contains(bmsticket__status,'Frank Dechellis')  or contains(orderReason,'Frank Dechellis')  or contains(primaryAssignee,'Frank Dechellis')  )\";\nvar parser = new Parser();\nlet filter = `$filter=${query}`;\nvar ast = parser.query(filter);",
              "err": {},
              "uuid": "3ae0adda-296f-4eeb-834b-f0b8e0d5409a",
              "parentUUID": "5b36785f-bf84-4f57-a559-d0218aa8d4e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5fb5855-4684-4866-9d1b-343d39548856",
            "6eba548c-d4b7-42df-a10a-4a49d6fb3ea0",
            "4f19fe10-9349-4480-863f-f2bacd83ffd4",
            "a21e37d1-9ac3-42d7-b767-acd1bfc65fc4",
            "440fc097-297f-48f7-826d-2b97e220fd01",
            "8653251d-6798-436c-ac35-ba2d46149377",
            "f79a197c-02e5-40d4-bd5a-38d82a7e370b",
            "5f55fbe9-6c3b-4de7-8fca-b01934ab5212",
            "d38f8c6e-5c38-448a-9461-2014b045f909",
            "07af58fa-b6a9-4341-ac91-a83aa47fca7f",
            "677a8933-2798-46f7-84ff-3dcba31d5898",
            "ee1e9983-31d9-4998-b675-ee4be8d71c61",
            "ce48e9c5-94f4-4d6a-932b-9017091603ca",
            "fac5c402-90a9-4d24-8f4f-c5457f55ef5c",
            "9e888b85-762f-466a-9109-27c2ed566f53",
            "0154dc33-a305-43e7-8d35-1d386416bdcc",
            "9696cda3-f468-45d4-9a28-e121876b6246",
            "db8142e6-dca1-4b24-99a5-f997dd3b9d12",
            "333e8592-f04f-484f-890e-e8be7ec2a1bf",
            "60cae218-42ce-4d30-880f-ce1aa4d4412b",
            "27c14454-1249-4422-99dc-1f4455b18d7b",
            "3ae0adda-296f-4eeb-834b-f0b8e0d5409a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 135,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "541bed43-4249-4536-b1df-336736f49d53",
          "title": "Parser",
          "fullFile": "/home/jstott/projects/jstott/odata-v4-parser/test/parser.spec.js",
          "file": "/test/parser.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should instantiate odata parser",
              "fullTitle": "Parser should instantiate odata parser",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.filter(\"Categories/all(d:d/Title eq 'alma')\");\nexpect(\n  ast.value.value.value.value.next.value.value.predicate.value.value.right\n    .value\n).to.equal(\"Edm.String\");",
              "err": {},
              "uuid": "b525aa87-52a2-457f-bae6-929ea96177c2",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\nvar ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "6aaa1e59-9497-4022-a1d5-d98b49d298ea",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query Lambda Operators",
              "fullTitle": "Parser should parse query Lambda Operators",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\n// The request below returns People with Emails containing \"ll@contoso.com\". The Emails is a collection of primitive type string.\nvar ast = parser.query(\"$filter=Emails/any(s:endswith(s, 'contoso.com'))\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "5501bc3c-ed9e-4bc7-94ee-1c2e9697dda3",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query Lambda Operators2",
              "fullTitle": "Parser should parse query Lambda Operators2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\n//var ast = parser.query(\"$filter=contains(Location/Address, 'San Francisco')\");\n// The request below returns the friends of Me who have friends using \"Scott\" as their FirstName.\nvar ast = parser.query(\"$filter=Friends/any(f:f/FirstName eq 'Scott')\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "db1b4018-f5a6-43a4-ad8e-c1a9a457e708",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=Title eq 'alma'\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "5a0364f1-78e2-4fc6-b09e-04ded79be0b2",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse multiple orderby params",
              "fullTitle": "Parser should parse multiple orderby params",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$orderby=foo,bar\");\nexpect(ast.value.options[0].value.items[0].raw).to.equal(\"foo\");\nexpect(ast.value.options[0].value.items[1].raw).to.equal(\"bar\");",
              "err": {},
              "uuid": "1d79ae86-0319-4fe9-9d3f-d8e82cceebd7",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse custom query options",
              "fullTitle": "Parser should parse custom query options",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"foo=123&bar=foobar\");\nexpect(ast.value.options[0].value.key).to.equal(\"foo\");\nexpect(ast.value.options[0].value.value).to.equal(\"123\");\nexpect(ast.value.options[1].value.key).to.equal(\"bar\");\nexpect(ast.value.options[1].value.value).to.equal(\"foobar\");",
              "err": {},
              "uuid": "bfeda527-9f22-49f2-a620-71ed7e69649e",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error parsing invalid custom query options",
              "fullTitle": "Parser should throw error parsing invalid custom query options",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$foo=123\");\n  error = true;\n}catch(err){}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "28923cee-2320-490b-8387-05a19399ba9c",
              "parentUUID": "541bed43-4249-4536-b1df-336736f49d53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b525aa87-52a2-457f-bae6-929ea96177c2",
            "6aaa1e59-9497-4022-a1d5-d98b49d298ea",
            "5501bc3c-ed9e-4bc7-94ee-1c2e9697dda3",
            "db1b4018-f5a6-43a4-ad8e-c1a9a457e708",
            "5a0364f1-78e2-4fc6-b09e-04ded79be0b2",
            "1d79ae86-0319-4fe9-9d3f-d8e82cceebd7",
            "bfeda527-9f22-49f2-a620-71ed7e69649e",
            "28923cee-2320-490b-8387-05a19399ba9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
          "title": "Primitive literals from json",
          "fullFile": "/home/jstott/projects/jstott/odata-v4-parser/test/primitiveLiteral.spec.js",
          "file": "/test/primitiveLiteral.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "#0 should parse Binary with X: X'1a2B3c4D'",
              "fullTitle": "Primitive literals from json #0 should parse Binary with X: X'1a2B3c4D'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9e830555-9f6d-40ed-a781-7f586e2b24ab",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#1 should parse Binary - empty: binary''",
              "fullTitle": "Primitive literals from json #1 should parse Binary - empty: binary''",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b85ecbc1-37c0-4cc5-a964-4d5b38b78752",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#2 should parse Binary - f: binary'Zg=='",
              "fullTitle": "Primitive literals from json #2 should parse Binary - f: binary'Zg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "60418f48-9e0f-4e41-8468-7396d5d01e23",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#3 should parse Binary - f (pad character is optional): binary'Zg'",
              "fullTitle": "Primitive literals from json #3 should parse Binary - f (pad character is optional): binary'Zg'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "34be7284-b905-4d48-9ad4-fbef0ea2e071",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#4 should parse Binary - fo: binary'Zm8='",
              "fullTitle": "Primitive literals from json #4 should parse Binary - fo: binary'Zm8='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "65171842-d8ae-4afb-8814-4ee06157dc58",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "fullTitle": "Primitive literals from json #5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2ba820e7-eca1-4212-ab98-0cc364f62622",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#6 should parse Binary - foo: binary'Zm9v'",
              "fullTitle": "Primitive literals from json #6 should parse Binary - foo: binary'Zm9v'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1cdff78a-8f5e-4c14-abae-07af015981d2",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#7 should parse Binary - foob: binary'Zm9vYg=='",
              "fullTitle": "Primitive literals from json #7 should parse Binary - foob: binary'Zm9vYg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0264af54-ab51-45af-acd7-44a0de5a0405",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#8 should parse Binary - fooba: binary'Zm9vYmE='",
              "fullTitle": "Primitive literals from json #8 should parse Binary - fooba: binary'Zm9vYmE='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0cb8a7b5-427e-483e-b0c7-542936420f8b",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "fullTitle": "Primitive literals from json #9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d67ac95e-5d99-4569-a671-e197b4c59c6a",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#10 should parse Date in URL or body: 2012-09-03",
              "fullTitle": "Primitive literals from json #10 should parse Date in URL or body: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cc6a39e1-5c56-490f-8e6c-363cf9eca267",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#11 should parse Date: 2012-09-10",
              "fullTitle": "Primitive literals from json #11 should parse Date: 2012-09-10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0ab455c3-1811-4b95-9c79-762f34b61a61",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#12 should parse Date: 2012-09-20",
              "fullTitle": "Primitive literals from json #12 should parse Date: 2012-09-20",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6d9b803c-bc3e-4152-82df-7480fab48c05",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#13 should parse Date: 2012-09-03",
              "fullTitle": "Primitive literals from json #13 should parse Date: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d36d9ca8-03fb-4bd1-9a4b-a1db7685c5e2",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#14 should parse Date: year zero: 0000-01-01",
              "fullTitle": "Primitive literals from json #14 should parse Date: year zero: 0000-01-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b3ac331c-3343-4ee5-95c4-e70ef7155c5f",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#15 should parse Date: negative: -10000-04-01",
              "fullTitle": "Primitive literals from json #15 should parse Date: negative: -10000-04-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f2b642ae-33a7-43a0-b73e-723b87b9cda5",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "fullTitle": "Primitive literals from json #16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "fdef8acc-28ee-42e6-8c45-d2d95b8aa78d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "fullTitle": "Primitive literals from json #17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "412feffa-dde0-4be3-8d8f-f6331d6294ee",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "fullTitle": "Primitive literals from json #18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2efa64d4-727a-4c32-9e71-eeeae3207989",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "fullTitle": "Primitive literals from json #19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5e1345f8-f839-4f61-9a3c-17ffeb287c72",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "fullTitle": "Primitive literals from json #20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7988bbad-d138-4594-b6f4-0f80aabfcf49",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "fullTitle": "Primitive literals from json #21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "00b77a35-5920-4b08-99b6-a38dadb4d56b",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "fullTitle": "Primitive literals from json #22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b318cb28-6291-444b-8dbe-31c8593eaf87",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "fullTitle": "Primitive literals from json #23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "07742180-15b1-4066-a000-5ceb3778ec39",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "fullTitle": "Primitive literals from json #24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a69133b3-2c69-4d0b-a2c5-c464776046a2",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "fullTitle": "Primitive literals from json #25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f02ed750-a95d-45b6-afd4-4c7b46de52f3",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "fullTitle": "Primitive literals from json #26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9cac99a2-fa8d-4520-b48f-65819f80c93c",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#27 should parse Decimal: 3.14",
              "fullTitle": "Primitive literals from json #27 should parse Decimal: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b8bf2834-1208-4ac6-a144-fd08b4d7c2d5",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#28 should parse Duration in body: P6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #28 should parse Duration in body: P6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b4b5ae57-bb95-4b39-90ec-52c086bf227a",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6a6f7604-b323-482a-b012-8bf17981800e",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cb98cd08-fc83-47a4-81db-513fb6718003",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "fullTitle": "Primitive literals from json #31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5c1a7a4e-e074-4ff7-b34d-8eacdfe9e68c",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#32 should parse Decimal: integer: -2",
              "fullTitle": "Primitive literals from json #32 should parse Decimal: integer: -2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2f8de923-b7b3-4d79-8535-11ac97be3aaf",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#33 should parse Decimal: integer: +42.",
              "fullTitle": "Primitive literals from json #33 should parse Decimal: integer: +42.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ec53c35a-31fe-475e-b27b-ab4bbf2a6be1",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#34 should parse Decimal: no digit before decimal point: .1",
              "fullTitle": "Primitive literals from json #34 should parse Decimal: no digit before decimal point: .1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6a16d3fa-126b-4026-b72e-97fef6aafbaf",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#35 should parse Decimal in URL: 3.14",
              "fullTitle": "Primitive literals from json #35 should parse Decimal in URL: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f2c13f0b-fb91-4bb2-ba59-c46feca7f5d7",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#36 should parse Double: 3.14",
              "fullTitle": "Primitive literals from json #36 should parse Double: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b361119f-b5b7-4266-b05a-313a20cd89ed",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#37 should parse Double with exponent: -0.314e1",
              "fullTitle": "Primitive literals from json #37 should parse Double with exponent: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3eac3064-ef50-4023-bd1c-c8868e06c0e4",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#38 should parse Negative infinity: -INF",
              "fullTitle": "Primitive literals from json #38 should parse Negative infinity: -INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "fc863e4c-a432-4a1c-99e1-2a5ae616431c",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#39 should parse Positive infinity: INF",
              "fullTitle": "Primitive literals from json #39 should parse Positive infinity: INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "736fb999-31ce-4aea-8cf4-b1610a6cc143",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#40 should parse Not a Number: NaN",
              "fullTitle": "Primitive literals from json #40 should parse Not a Number: NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0dc87152-dc87-43c1-84fa-9743007c66db",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#41 should parse Double in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #41 should parse Double in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "19a45385-07d7-4cf5-b01d-839bb90f717d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#42 should parse Single in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #42 should parse Single in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0a0dc2ea-d8de-44d6-993c-25db3aa034c9",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#43 should parse Byte: 255",
              "fullTitle": "Primitive literals from json #43 should parse Byte: 255",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5d922099-8819-49de-90d9-5e8acaf6c6bb",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#44 should parse SByte: -128",
              "fullTitle": "Primitive literals from json #44 should parse SByte: -128",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c65a1c1a-b754-4b02-a74b-fa1359ee1d7b",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#45 should parse Int16: +32000",
              "fullTitle": "Primitive literals from json #45 should parse Int16: +32000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5a262ce1-a5c1-4ec3-86f6-ada37fa7cbdf",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#46 should parse Int32: -2000000000",
              "fullTitle": "Primitive literals from json #46 should parse Int32: -2000000000",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7312a1e2-92bb-4b2e-bc2e-110e655b9e4d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#47 should parse Int64: 1234567890123456789",
              "fullTitle": "Primitive literals from json #47 should parse Int64: 1234567890123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "92882213-bb35-42c9-bd33-c875f5b704d1",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#48 should parse Null: unqualified: null",
              "fullTitle": "Primitive literals from json #48 should parse Null: unqualified: null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "289385c6-e2db-4712-ac38-7ff74d7b589f",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "fullTitle": "Primitive literals from json #49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "39d9b198-f207-4827-85c0-8c09cd7de87e",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#50 should parse String: 'O''Neil'",
              "fullTitle": "Primitive literals from json #50 should parse String: 'O''Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6838b7c1-448c-4a92-b12a-039649224831",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#51 should parse String: %27O'%27Neil'",
              "fullTitle": "Primitive literals from json #51 should parse String: %27O'%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "69c095a9-b2f2-4dba-be1e-26fd7f0ee1f4",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#52 should parse String: 'O'Neil'",
              "fullTitle": "Primitive literals from json #52 should parse String: 'O'Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c1804030-5409-4601-9304-545963c1c0a0",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#53 should parse String: 'O%27Neil'",
              "fullTitle": "Primitive literals from json #53 should parse String: 'O%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "699664f4-9b6b-4c5f-852e-c7b3f48022e6",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#54 should parse String: '%26%28'",
              "fullTitle": "Primitive literals from json #54 should parse String: '%26%28'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0b835d24-462d-4ae6-9e7f-3d0ea5c80aa5",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#55 should parse primitive value in request body - enumeration member: Yellow",
              "fullTitle": "Primitive literals from json #55 should parse primitive value in request body - enumeration member: Yellow",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5272e5e8-9fca-4b1d-9cb3-1b587b067b97",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "fullTitle": "Primitive literals from json #56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "90b7261b-d98c-4875-b566-1ee8db79848d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#57 should parse primitive value in request body - integer: 0123456789",
              "fullTitle": "Primitive literals from json #57 should parse primitive value in request body - integer: 0123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "79309df8-a541-49fc-8545-fdff3e99fa7d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "7e16f8d9-3c72-4d78-b307-0f5c723c7d89",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "fullTitle": "Primitive literals from json #59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b7c9b49f-82a4-40b7-be83-e78f8b7f4bef",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "fullTitle": "Primitive literals from json #60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "438b8c78-520d-472c-874b-4798709a7d05",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#61 should parse Key: 'Hugo''s%20Tavern'",
              "fullTitle": "Primitive literals from json #61 should parse Key: 'Hugo''s%20Tavern'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f8aa581f-3018-4858-a3df-305836e207a8",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d89832bd-b4c2-463e-ae8e-3290fcd632af",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0f5784b9-3d11-4d13-ae11-849f0eafad52",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "fullTitle": "Primitive literals from json #64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1783427d-c9fd-422d-96e9-166bbff61d58",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#65 should parse TimeOfDay: 11:22:33",
              "fullTitle": "Primitive literals from json #65 should parse TimeOfDay: 11:22:33",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ffd2b18d-2d35-4452-b628-8a750df7f4da",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#66 should parse TimeOfDay: no seconds: 11:22",
              "fullTitle": "Primitive literals from json #66 should parse TimeOfDay: no seconds: 11:22",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "86fa0df1-bbfe-4c5e-96b5-02fdddc0b785",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "fullTitle": "Primitive literals from json #67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "92fd07f0-eda1-4d91-9962-f2301748fad2",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#68 should parse TimeOfDay: 24:00: 24:00:00",
              "fullTitle": "Primitive literals from json #68 should parse TimeOfDay: 24:00: 24:00:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3efcd60b-5ae9-401f-8d7c-159d6fb94896",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "fullTitle": "Primitive literals from json #69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bbba5a30-f7c0-4542-91f3-b37bbfbc4d5b",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "fullTitle": "Primitive literals from json #70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c49f61f5-ef8c-4311-a35c-43e6792fab0f",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "35f64ea6-459c-496b-9461-147d38cbb48f",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "88379248-6578-4dae-9aed-aebe4a00622d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "3e45cba3-550c-4c71-bc64-6b5e0e34cb50",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d986500b-6a57-4863-9002-b570f408d27e",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "176cf0c0-e25b-4e41-938d-92075d39ee8a",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5d97af94-ab6b-415d-a0f9-cf9da9f748af",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a3e1d248-ab1f-4bf4-82af-9006e5f5acb2",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b6dbf4f1-dd4b-4680-8728-c4a727cba52f",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d1aad183-eb1d-4270-acea-d96a12d95e78",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c761ae60-8f66-4d97-ac15-8ecb813d178f",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "dfe0fa07-8731-4024-ac30-d6ccb11e2e42",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "78239919-e1cd-4432-9777-e3ab0bd38255",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "788d7250-a011-46cd-933d-c6b91801bd1d",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "dca7756b-9bc6-49ab-8195-51d6caaf338c",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f9fd309a-4d1b-42fb-9338-9b37e9adb324",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer.from(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "03052035-05ae-41ae-bb53-f8ee75ebf724",
              "parentUUID": "330c0fdb-45ff-46f5-9c3b-773ef136e4b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e830555-9f6d-40ed-a781-7f586e2b24ab",
            "b85ecbc1-37c0-4cc5-a964-4d5b38b78752",
            "60418f48-9e0f-4e41-8468-7396d5d01e23",
            "34be7284-b905-4d48-9ad4-fbef0ea2e071",
            "65171842-d8ae-4afb-8814-4ee06157dc58",
            "2ba820e7-eca1-4212-ab98-0cc364f62622",
            "1cdff78a-8f5e-4c14-abae-07af015981d2",
            "0264af54-ab51-45af-acd7-44a0de5a0405",
            "0cb8a7b5-427e-483e-b0c7-542936420f8b",
            "d67ac95e-5d99-4569-a671-e197b4c59c6a",
            "cc6a39e1-5c56-490f-8e6c-363cf9eca267",
            "0ab455c3-1811-4b95-9c79-762f34b61a61",
            "6d9b803c-bc3e-4152-82df-7480fab48c05",
            "d36d9ca8-03fb-4bd1-9a4b-a1db7685c5e2",
            "b3ac331c-3343-4ee5-95c4-e70ef7155c5f",
            "f2b642ae-33a7-43a0-b73e-723b87b9cda5",
            "fdef8acc-28ee-42e6-8c45-d2d95b8aa78d",
            "412feffa-dde0-4be3-8d8f-f6331d6294ee",
            "2efa64d4-727a-4c32-9e71-eeeae3207989",
            "5e1345f8-f839-4f61-9a3c-17ffeb287c72",
            "7988bbad-d138-4594-b6f4-0f80aabfcf49",
            "00b77a35-5920-4b08-99b6-a38dadb4d56b",
            "b318cb28-6291-444b-8dbe-31c8593eaf87",
            "07742180-15b1-4066-a000-5ceb3778ec39",
            "a69133b3-2c69-4d0b-a2c5-c464776046a2",
            "f02ed750-a95d-45b6-afd4-4c7b46de52f3",
            "9cac99a2-fa8d-4520-b48f-65819f80c93c",
            "b8bf2834-1208-4ac6-a144-fd08b4d7c2d5",
            "b4b5ae57-bb95-4b39-90ec-52c086bf227a",
            "6a6f7604-b323-482a-b012-8bf17981800e",
            "cb98cd08-fc83-47a4-81db-513fb6718003",
            "5c1a7a4e-e074-4ff7-b34d-8eacdfe9e68c",
            "2f8de923-b7b3-4d79-8535-11ac97be3aaf",
            "ec53c35a-31fe-475e-b27b-ab4bbf2a6be1",
            "6a16d3fa-126b-4026-b72e-97fef6aafbaf",
            "f2c13f0b-fb91-4bb2-ba59-c46feca7f5d7",
            "b361119f-b5b7-4266-b05a-313a20cd89ed",
            "3eac3064-ef50-4023-bd1c-c8868e06c0e4",
            "fc863e4c-a432-4a1c-99e1-2a5ae616431c",
            "736fb999-31ce-4aea-8cf4-b1610a6cc143",
            "0dc87152-dc87-43c1-84fa-9743007c66db",
            "19a45385-07d7-4cf5-b01d-839bb90f717d",
            "0a0dc2ea-d8de-44d6-993c-25db3aa034c9",
            "5d922099-8819-49de-90d9-5e8acaf6c6bb",
            "c65a1c1a-b754-4b02-a74b-fa1359ee1d7b",
            "5a262ce1-a5c1-4ec3-86f6-ada37fa7cbdf",
            "7312a1e2-92bb-4b2e-bc2e-110e655b9e4d",
            "92882213-bb35-42c9-bd33-c875f5b704d1",
            "289385c6-e2db-4712-ac38-7ff74d7b589f",
            "39d9b198-f207-4827-85c0-8c09cd7de87e",
            "6838b7c1-448c-4a92-b12a-039649224831",
            "69c095a9-b2f2-4dba-be1e-26fd7f0ee1f4",
            "c1804030-5409-4601-9304-545963c1c0a0",
            "699664f4-9b6b-4c5f-852e-c7b3f48022e6",
            "0b835d24-462d-4ae6-9e7f-3d0ea5c80aa5",
            "5272e5e8-9fca-4b1d-9cb3-1b587b067b97",
            "90b7261b-d98c-4875-b566-1ee8db79848d",
            "79309df8-a541-49fc-8545-fdff3e99fa7d",
            "7e16f8d9-3c72-4d78-b307-0f5c723c7d89",
            "b7c9b49f-82a4-40b7-be83-e78f8b7f4bef",
            "438b8c78-520d-472c-874b-4798709a7d05",
            "f8aa581f-3018-4858-a3df-305836e207a8",
            "d89832bd-b4c2-463e-ae8e-3290fcd632af",
            "0f5784b9-3d11-4d13-ae11-849f0eafad52",
            "1783427d-c9fd-422d-96e9-166bbff61d58",
            "ffd2b18d-2d35-4452-b628-8a750df7f4da",
            "86fa0df1-bbfe-4c5e-96b5-02fdddc0b785",
            "92fd07f0-eda1-4d91-9962-f2301748fad2",
            "3efcd60b-5ae9-401f-8d7c-159d6fb94896",
            "bbba5a30-f7c0-4542-91f3-b37bbfbc4d5b",
            "c49f61f5-ef8c-4311-a35c-43e6792fab0f",
            "35f64ea6-459c-496b-9461-147d38cbb48f",
            "88379248-6578-4dae-9aed-aebe4a00622d",
            "3e45cba3-550c-4c71-bc64-6b5e0e34cb50",
            "d986500b-6a57-4863-9002-b570f408d27e",
            "176cf0c0-e25b-4e41-938d-92075d39ee8a",
            "5d97af94-ab6b-415d-a0f9-cf9da9f748af",
            "a3e1d248-ab1f-4bf4-82af-9006e5f5acb2",
            "b6dbf4f1-dd4b-4680-8728-c4a727cba52f",
            "d1aad183-eb1d-4270-acea-d96a12d95e78",
            "c761ae60-8f66-4d97-ac15-8ecb813d178f",
            "dfe0fa07-8731-4024-ac30-d6ccb11e2e42",
            "78239919-e1cd-4432-9777-e3ab0bd38255",
            "788d7250-a011-46cd-933d-c6b91801bd1d",
            "dca7756b-9bc6-49ab-8195-51d6caaf338c",
            "f9fd309a-4d1b-42fb-9338-9b37e9adb324",
            "03052035-05ae-41ae-bb53-f8ee75ebf724"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "index",
        "reportTitle": "JayStack OData V4 Parser"
      },
      "version": "5.2.0"
    }
  }
}