{
  "stats": {
    "suites": 2,
    "tests": 92,
    "passes": 92,
    "pending": 0,
    "failures": 0,
    "start": "2021-09-08T21:48:37.827Z",
    "end": "2021-09-08T21:48:37.895Z",
    "duration": 68,
    "testsRegistered": 92,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d455a2d6-76fc-420a-a6c7-781120dc3a64",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aaef62f3-f4d4-40a7-ab10-4d7a58ebc14b",
          "title": "Parser",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\parser.spec.js",
          "file": "\\test\\parser.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should instantiate odata parser",
              "fullTitle": "Parser should instantiate odata parser",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.filter(\"Categories/all(d:d/Title eq 'alma')\");\nexpect(\n  ast.value.value.value.value.next.value.value.predicate.value.value.right\n    .value\n).to.equal(\"Edm.String\");",
              "err": {},
              "uuid": "b572bdb8-5c95-4d6c-8491-4ad057471ff3",
              "parentUUID": "aaef62f3-f4d4-40a7-ab10-4d7a58ebc14b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse query string",
              "fullTitle": "Parser should parse query string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$filter=Title eq 'alma'\");\nexpect(ast.value.options[0].type).to.equal(\"Filter\");",
              "err": {},
              "uuid": "1a7ce020-885e-476b-ac39-8ea3b3cbc34c",
              "parentUUID": "aaef62f3-f4d4-40a7-ab10-4d7a58ebc14b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse multiple orderby params",
              "fullTitle": "Parser should parse multiple orderby params",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"$orderby=foo,bar\");\nexpect(ast.value.options[0].value.items[0].raw).to.equal(\"foo\");\nexpect(ast.value.options[0].value.items[1].raw).to.equal(\"bar\");",
              "err": {},
              "uuid": "df6dc40a-98df-4336-ad0f-71ff390b66c5",
              "parentUUID": "aaef62f3-f4d4-40a7-ab10-4d7a58ebc14b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse custom query options",
              "fullTitle": "Parser should parse custom query options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar ast = parser.query(\"foo=123&bar=foobar\");\nexpect(ast.value.options[0].value.key).to.equal(\"foo\");\nexpect(ast.value.options[0].value.value).to.equal(\"123\");\nexpect(ast.value.options[1].value.key).to.equal(\"bar\");\nexpect(ast.value.options[1].value.value).to.equal(\"foobar\");",
              "err": {},
              "uuid": "3ed5cde9-036b-462c-90a3-e544efd0c4d6",
              "parentUUID": "aaef62f3-f4d4-40a7-ab10-4d7a58ebc14b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error parsing invalid custom query options",
              "fullTitle": "Parser should throw error parsing invalid custom query options",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var parser = new Parser();\nvar error = false;\ntry{\n  var ast = parser.query(\"$foo=123\");\n  error = true;\n}catch(err){}\nexpect(error).to.be.false;",
              "err": {},
              "uuid": "660596ab-dcea-4789-a67e-6405ed039c5a",
              "parentUUID": "aaef62f3-f4d4-40a7-ab10-4d7a58ebc14b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b572bdb8-5c95-4d6c-8491-4ad057471ff3",
            "1a7ce020-885e-476b-ac39-8ea3b3cbc34c",
            "df6dc40a-98df-4336-ad0f-71ff390b66c5",
            "3ed5cde9-036b-462c-90a3-e544efd0c4d6",
            "660596ab-dcea-4789-a67e-6405ed039c5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2557527-2ae4-4483-8004-45982ffc318d",
          "title": "Primitive literals from json",
          "fullFile": "C:\\projects\\github-stott\\odata-v4-parser\\test\\primitiveLiteral.spec.js",
          "file": "\\test\\primitiveLiteral.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "#0 should parse Binary with X: X'1a2B3c4D'",
              "fullTitle": "Primitive literals from json #0 should parse Binary with X: X'1a2B3c4D'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "35fa1853-67b5-4a8d-8894-1e67ff157fa8",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#1 should parse Binary - empty: binary''",
              "fullTitle": "Primitive literals from json #1 should parse Binary - empty: binary''",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "931a9e7d-571e-4023-885c-f5df05bea652",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#2 should parse Binary - f: binary'Zg=='",
              "fullTitle": "Primitive literals from json #2 should parse Binary - f: binary'Zg=='",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "58811240-31ac-432f-8acf-8f32111e70d5",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#3 should parse Binary - f (pad character is optional): binary'Zg'",
              "fullTitle": "Primitive literals from json #3 should parse Binary - f (pad character is optional): binary'Zg'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c78941d0-f1f4-4f79-9142-eb3839e7e3b5",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#4 should parse Binary - fo: binary'Zm8='",
              "fullTitle": "Primitive literals from json #4 should parse Binary - fo: binary'Zm8='",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0f9af414-3ede-45fa-b142-a689e583be8f",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "fullTitle": "Primitive literals from json #5 should parse Binary - fo (pad character is optional): binary'Zm8='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "99afc0ad-38bd-405d-9362-ccd39491f749",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#6 should parse Binary - foo: binary'Zm9v'",
              "fullTitle": "Primitive literals from json #6 should parse Binary - foo: binary'Zm9v'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ef6f7ca9-5072-4f9a-8ef3-03ba4f5b58fa",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#7 should parse Binary - foob: binary'Zm9vYg=='",
              "fullTitle": "Primitive literals from json #7 should parse Binary - foob: binary'Zm9vYg=='",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "161f8f51-4400-435b-9221-8a7739f4d1e1",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#8 should parse Binary - fooba: binary'Zm9vYmE='",
              "fullTitle": "Primitive literals from json #8 should parse Binary - fooba: binary'Zm9vYmE='",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b6bbce23-d2e7-4ff3-a49c-e9e9fd4bb5d6",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "fullTitle": "Primitive literals from json #9 should parse Binary - foobar: binary'Zm9vYmFy'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5b416ca6-dff3-4e90-9aeb-c4e95a1deb8b",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#10 should parse Date in URL or body: 2012-09-03",
              "fullTitle": "Primitive literals from json #10 should parse Date in URL or body: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "99ab0e5e-85ff-4a9b-88f6-6788a803a196",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#11 should parse Date: 2012-09-10",
              "fullTitle": "Primitive literals from json #11 should parse Date: 2012-09-10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f3e0c146-ced9-46eb-bace-cdd58e1e4578",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#12 should parse Date: 2012-09-20",
              "fullTitle": "Primitive literals from json #12 should parse Date: 2012-09-20",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4b907f3e-4cec-4d97-893f-62fe3bdcfe51",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#13 should parse Date: 2012-09-03",
              "fullTitle": "Primitive literals from json #13 should parse Date: 2012-09-03",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "4565736e-02f3-4049-8738-f903529d965a",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#14 should parse Date: year zero: 0000-01-01",
              "fullTitle": "Primitive literals from json #14 should parse Date: year zero: 0000-01-01",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "500ba912-05ef-49c8-9e60-2573ff6ef362",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#15 should parse Date: negative: -10000-04-01",
              "fullTitle": "Primitive literals from json #15 should parse Date: negative: -10000-04-01",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "99f0257d-732d-4697-8d35-9e0bcd58a470",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "fullTitle": "Primitive literals from json #16 should parse DateTimeOffset: no seconds: 2012-09-03T13:52Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "abca937d-177c-4070-a36e-fa5e2421ca43",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "fullTitle": "Primitive literals from json #17 should parse DateTimeOffset: seconds: 2012-09-03T08:09:02Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "06ef69e1-6739-45d2-8af4-ae39c7ec9444",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "fullTitle": "Primitive literals from json #18 should parse DateTimeOffset: subseconds: 2012-08-31T18:19:22.1Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "912d016d-29cf-471a-adff-4a312afab999",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "fullTitle": "Primitive literals from json #19 should parse DateTimeOffset: year zero: 0000-01-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9160cebe-f787-47dc-bb5d-170c7f1b1d42",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "fullTitle": "Primitive literals from json #20 should parse DateTimeOffset: negative: -10000-04-01T00:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "104ad90d-a4c8-4e1a-ab07-b10d778de4e4",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "fullTitle": "Primitive literals from json #21 should parse DateTimeOffset: Midnight this day: 2011-12-31T24:00Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1d4bbdfc-8cfd-47e1-a26f-51f2a2898bc0",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "fullTitle": "Primitive literals from json #22 should parse DateTimeOffset: Midnight this day with seconds: 2011-12-31T24:00:00Z",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a1b66e85-0f83-47c1-ae48-887c7d4fd67a",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "fullTitle": "Primitive literals from json #23 should parse DateTimeOffset: CEST: 2012-09-03T14:53+02:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "39b545d7-9201-415e-a499-847d66cebe8d",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "fullTitle": "Primitive literals from json #24 should parse DateTimeOffset: UTC: 2012-09-03T12:53Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5da975d1-f90e-4682-9481-abe2efc4abd7",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "fullTitle": "Primitive literals from json #25 should parse DateTimeOffset: 24:00: 2012-09-03T24:00-03:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8e01b0e9-141e-4b7f-b4e3-21cf72648823",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "fullTitle": "Primitive literals from json #26 should parse DateTimeOffset: 20th hour UTC: 2012-11-28T20:00:00.000Z",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ac7b997b-2a8a-43e2-9aa6-372f8b05180a",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#27 should parse Decimal: 3.14",
              "fullTitle": "Primitive literals from json #27 should parse Decimal: 3.14",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b04342b8-11c2-4e14-821a-ad32cddbecf6",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#28 should parse Duration in body: P6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #28 should parse Duration in body: P6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c36316d5-3030-44c0-a485-9497617064c2",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #29 should parse Duration in body: no years allowed: P1Y6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f92a79b2-9b18-42e2-b67f-3f4c9d7bdfcd",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "fullTitle": "Primitive literals from json #30 should parse Duration in body: no months allowed: P1M6DT23H59M59.9999S",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "112b59c8-84bf-410b-8497-b90bd88130db",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "fullTitle": "Primitive literals from json #31 should parse Duration in URL: duration'P6DT23H59M59.9999S'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f6ef3b55-7288-4c20-b33b-ada6323c320a",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#32 should parse Decimal: integer: -2",
              "fullTitle": "Primitive literals from json #32 should parse Decimal: integer: -2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "0cbc1f5b-649c-44e5-8611-56dabb5697d7",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#33 should parse Decimal: integer: +42.",
              "fullTitle": "Primitive literals from json #33 should parse Decimal: integer: +42.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1eb15965-669b-4a32-8634-0d6c12c2a754",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#34 should parse Decimal: no digit before decimal point: .1",
              "fullTitle": "Primitive literals from json #34 should parse Decimal: no digit before decimal point: .1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "cdeed2d0-3809-4538-93a0-b6d8828e85e2",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#35 should parse Decimal in URL: 3.14",
              "fullTitle": "Primitive literals from json #35 should parse Decimal in URL: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "66e00988-e257-4cea-ba18-64791166df03",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#36 should parse Double: 3.14",
              "fullTitle": "Primitive literals from json #36 should parse Double: 3.14",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2ae5dabc-610c-477b-bbb1-5cb271465a2b",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#37 should parse Double with exponent: -0.314e1",
              "fullTitle": "Primitive literals from json #37 should parse Double with exponent: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5b181137-38b1-4a21-8506-4703ff45579b",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#38 should parse Negative infinity: -INF",
              "fullTitle": "Primitive literals from json #38 should parse Negative infinity: -INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "8c8153f5-4323-48ad-973f-d53b86e74a66",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#39 should parse Positive infinity: INF",
              "fullTitle": "Primitive literals from json #39 should parse Positive infinity: INF",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "207182cb-ada2-4633-a3da-54147ef634d9",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#40 should parse Not a Number: NaN",
              "fullTitle": "Primitive literals from json #40 should parse Not a Number: NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9172b7e8-95e0-454c-b046-6cf87cb6a4a0",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#41 should parse Double in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #41 should parse Double in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9f23b277-d7ea-45eb-aef7-2484e341f30e",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#42 should parse Single in URL: -0.314e1",
              "fullTitle": "Primitive literals from json #42 should parse Single in URL: -0.314e1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "12820896-3697-48d4-b20e-b5dc1e0ea6b9",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#43 should parse Byte: 255",
              "fullTitle": "Primitive literals from json #43 should parse Byte: 255",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c2167659-9293-4a9f-bedf-6f594660edf2",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#44 should parse SByte: -128",
              "fullTitle": "Primitive literals from json #44 should parse SByte: -128",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b8caf9d0-3af5-4e14-80f0-993d2aaf76aa",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#45 should parse Int16: +32000",
              "fullTitle": "Primitive literals from json #45 should parse Int16: +32000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "9be1ec5c-7265-4ede-9418-d3d3fc0cfaed",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#46 should parse Int32: -2000000000",
              "fullTitle": "Primitive literals from json #46 should parse Int32: -2000000000",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "133c078d-5412-4a89-bd92-2b1091542b57",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#47 should parse Int64: 1234567890123456789",
              "fullTitle": "Primitive literals from json #47 should parse Int64: 1234567890123456789",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bc6b83a9-af04-4573-a2ef-ce478c76113b",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#48 should parse Null: unqualified: null",
              "fullTitle": "Primitive literals from json #48 should parse Null: unqualified: null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "038d0225-f6a0-4a7d-b8f1-6edc750fad52",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "fullTitle": "Primitive literals from json #49 should parse String: 'ABCDEFGHIHJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&('')*+,;=@'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2f85e7eb-e42a-4414-9521-b83ff28db236",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#50 should parse String: 'O''Neil'",
              "fullTitle": "Primitive literals from json #50 should parse String: 'O''Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "29bb727a-892c-443e-a0dc-a74063e0a5fb",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#51 should parse String: %27O'%27Neil'",
              "fullTitle": "Primitive literals from json #51 should parse String: %27O'%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5e723b07-abf5-413d-a7ad-50eff73ae89c",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#52 should parse String: 'O'Neil'",
              "fullTitle": "Primitive literals from json #52 should parse String: 'O'Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5cadf925-4b3f-4715-9bc5-ac6b139f801d",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#53 should parse String: 'O%27Neil'",
              "fullTitle": "Primitive literals from json #53 should parse String: 'O%27Neil'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f0fa1a1f-14ee-429c-bfa7-174a011a1f49",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#54 should parse String: '%26%28'",
              "fullTitle": "Primitive literals from json #54 should parse String: '%26%28'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ae9e1f4f-e682-4ed4-a92c-7d0455d081e7",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#55 should parse primitive value in request body - enumeration member: Yellow",
              "fullTitle": "Primitive literals from json #55 should parse primitive value in request body - enumeration member: Yellow",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "35777501-f505-4f0f-a78d-311a89064288",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "fullTitle": "Primitive literals from json #56 should parse primitive value in request body - geo point: SRID=0;Point(142.1 64.1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a33cd813-42eb-4ee4-8c7b-43234fbd4c41",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#57 should parse primitive value in request body - integer: 0123456789",
              "fullTitle": "Primitive literals from json #57 should parse primitive value in request body - integer: 0123456789",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "94649ef8-90da-4107-99c4-e3f686ab3f9d",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #58 should parse primitive value in request body - guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "e4d417e0-dc81-4f5c-8f26-a21bf53f17a6",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "fullTitle": "Primitive literals from json #59 should parse primitive value in request body - binary: a123456789abcdefABA=",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "18a601a2-5cb7-461c-a8e6-d42bec9dcafc",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "fullTitle": "Primitive literals from json #60 should parse primitive value in request body - binary with line breaks and spaces: a1234567 89abcdefABA",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6b7d2a60-94da-4db1-b196-ed83e68488c2",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#61 should parse Key: 'Hugo''s%20Tavern'",
              "fullTitle": "Primitive literals from json #61 should parse Key: 'Hugo''s%20Tavern'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2d9529b3-cfe6-4b54-8877-cc15d5d46656",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #62 should parse Correct Guid: 01234567-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5a0e3f21-541a-499b-ad91-e370f31774b9",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "fullTitle": "Primitive literals from json #63 should parse Guid with wrong character: 01234g67-89ab-cdef-0123-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2be71f1b-3add-4200-966a-88456b6032da",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "fullTitle": "Primitive literals from json #64 should parse Guid with less than 32 digits: 01234567-89ab-cdef-456789abcdef",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "1d533365-094b-468e-94f0-6b574d5c5dfa",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#65 should parse TimeOfDay: 11:22:33",
              "fullTitle": "Primitive literals from json #65 should parse TimeOfDay: 11:22:33",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "62ad7632-5391-420e-b84e-bb97eb3b49fb",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#66 should parse TimeOfDay: no seconds: 11:22",
              "fullTitle": "Primitive literals from json #66 should parse TimeOfDay: no seconds: 11:22",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "36f60dde-18ba-46c0-934b-2bbcf27c3915",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "fullTitle": "Primitive literals from json #67 should parse TimeOfDay: fractional seconds: 11:22:33.4444444",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f62674dc-0ca9-4a74-842e-433409332fbd",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#68 should parse TimeOfDay: 24:00: 24:00:00",
              "fullTitle": "Primitive literals from json #68 should parse TimeOfDay: 24:00: 24:00:00",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "433ed866-b8ec-4c10-b550-912cec5fd8c0",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "fullTitle": "Primitive literals from json #69 should parse 5.1.1.1.1 boolean - only true and false: 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6d376fa9-c346-4edd-9b4a-0501e36efea1",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "fullTitle": "Primitive literals from json #70 should parse 5.1.1.1.1 boolean - only true and false: 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d08b7391-574a-4b0c-a783-2ebe8de35945",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #71 should parse GeographyCollection: geography'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "6608112e-0ea2-43cb-a0f8-02dbb885aeba",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #72 should parse GeographyLineString: geography'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "c894445f-5524-459a-8833-f50288cfe0ae",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #73 should parse GeographyMultiLineString: geography'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "5a9eecbf-89cf-47c9-aa1e-3bd5616df4b4",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #74 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a0f7555a-d765-42a7-af65-8ee8f2959ccb",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #75 should parse GeographyMultiPoint: geography'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "d5b06d1a-8f91-4d88-8c93-5940ae64935a",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #76 should parse GeographyMultiPolygon: geography'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2bb29201-6193-49fe-bdf4-55ac5ed6605c",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #77 should parse GeographyPoint: geography'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "f5ad338b-d0e8-4a06-89b7-a49d3e3ead79",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #78 should parse GeographyPolygon: geography'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "bada6d8c-3c76-48b5-83d1-c7acf815cfb8",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #79 should parse GeometryCollection: geometry'SRID=0;Collection(LineString(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "2f613f5b-7993-4ee9-8265-714a9ca50ee9",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "fullTitle": "Primitive literals from json #80 should parse GeometryLineString: geometry'SRID=0;LineString(142.1 64.1,3.14 2.78)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "db6b61e8-d481-4a92-9880-5e0c9d693510",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "fullTitle": "Primitive literals from json #81 should parse GeometryMultiLineString: geometry'SRID=0;MultiLineString((142.1 64.1,3.14 2.78),(142.1 64.1,3.14 2.78))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "580319c3-ea51-430a-bcba-0b5461a797ca",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "fullTitle": "Primitive literals from json #82 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint()'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "ba5a52db-9ecd-42f3-880f-ce0bd7c39510",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "fullTitle": "Primitive literals from json #83 should parse GeometryMultiPoint: geometry'SRID=0;MultiPoint((142.1 64.1),(1 2))'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b8b028dc-950b-4f27-b058-7c05e3f10f2e",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "fullTitle": "Primitive literals from json #84 should parse GeometryMultiPolygon: geometry'SRID=0;MultiPolygon(((1 1,1 1),(1 1,2 2,3 3,1 1)))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "368bb48a-106b-42b6-a5c9-2d1da5da843b",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "fullTitle": "Primitive literals from json #85 should parse GeometryPoint: geometry'SRID=0;Point(142.1 64.1)'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "a1c5bf04-506d-4b0c-b47c-f3179b6dcecf",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "#86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "fullTitle": "Primitive literals from json #86 should parse GeometryPolygon: geometry'SRID=0;Polygon((1 1,1 1),(1 1,2 2,3 3,1 1))'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let source = new Uint8Array(new Buffer(item.Input));\nif (item[resultName].next === undefined) item[resultName].next = item.Input.length;\nif (item[resultName].raw === undefined) item[resultName].raw = item.Input;\nlet literalFunctionName = getLiteralFunctionName(item[\"-Rule\"] || 'primitiveLiteral');\nlet literal = (PrimitiveLiteral[literalFunctionName] || PrimitiveLiteral.primitiveLiteral)(source, 0);\nif (item['-FailAt'] !== undefined) {\n  expect(literal).to.be.undefined;\n  return;\n}\nexpect(literal).to.deep.equal(item[resultName]);",
              "err": {},
              "uuid": "b40ffb6d-22a2-4dc5-b266-bb25b1c6c990",
              "parentUUID": "c2557527-2ae4-4483-8004-45982ffc318d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35fa1853-67b5-4a8d-8894-1e67ff157fa8",
            "931a9e7d-571e-4023-885c-f5df05bea652",
            "58811240-31ac-432f-8acf-8f32111e70d5",
            "c78941d0-f1f4-4f79-9142-eb3839e7e3b5",
            "0f9af414-3ede-45fa-b142-a689e583be8f",
            "99afc0ad-38bd-405d-9362-ccd39491f749",
            "ef6f7ca9-5072-4f9a-8ef3-03ba4f5b58fa",
            "161f8f51-4400-435b-9221-8a7739f4d1e1",
            "b6bbce23-d2e7-4ff3-a49c-e9e9fd4bb5d6",
            "5b416ca6-dff3-4e90-9aeb-c4e95a1deb8b",
            "99ab0e5e-85ff-4a9b-88f6-6788a803a196",
            "f3e0c146-ced9-46eb-bace-cdd58e1e4578",
            "4b907f3e-4cec-4d97-893f-62fe3bdcfe51",
            "4565736e-02f3-4049-8738-f903529d965a",
            "500ba912-05ef-49c8-9e60-2573ff6ef362",
            "99f0257d-732d-4697-8d35-9e0bcd58a470",
            "abca937d-177c-4070-a36e-fa5e2421ca43",
            "06ef69e1-6739-45d2-8af4-ae39c7ec9444",
            "912d016d-29cf-471a-adff-4a312afab999",
            "9160cebe-f787-47dc-bb5d-170c7f1b1d42",
            "104ad90d-a4c8-4e1a-ab07-b10d778de4e4",
            "1d4bbdfc-8cfd-47e1-a26f-51f2a2898bc0",
            "a1b66e85-0f83-47c1-ae48-887c7d4fd67a",
            "39b545d7-9201-415e-a499-847d66cebe8d",
            "5da975d1-f90e-4682-9481-abe2efc4abd7",
            "8e01b0e9-141e-4b7f-b4e3-21cf72648823",
            "ac7b997b-2a8a-43e2-9aa6-372f8b05180a",
            "b04342b8-11c2-4e14-821a-ad32cddbecf6",
            "c36316d5-3030-44c0-a485-9497617064c2",
            "f92a79b2-9b18-42e2-b67f-3f4c9d7bdfcd",
            "112b59c8-84bf-410b-8497-b90bd88130db",
            "f6ef3b55-7288-4c20-b33b-ada6323c320a",
            "0cbc1f5b-649c-44e5-8611-56dabb5697d7",
            "1eb15965-669b-4a32-8634-0d6c12c2a754",
            "cdeed2d0-3809-4538-93a0-b6d8828e85e2",
            "66e00988-e257-4cea-ba18-64791166df03",
            "2ae5dabc-610c-477b-bbb1-5cb271465a2b",
            "5b181137-38b1-4a21-8506-4703ff45579b",
            "8c8153f5-4323-48ad-973f-d53b86e74a66",
            "207182cb-ada2-4633-a3da-54147ef634d9",
            "9172b7e8-95e0-454c-b046-6cf87cb6a4a0",
            "9f23b277-d7ea-45eb-aef7-2484e341f30e",
            "12820896-3697-48d4-b20e-b5dc1e0ea6b9",
            "c2167659-9293-4a9f-bedf-6f594660edf2",
            "b8caf9d0-3af5-4e14-80f0-993d2aaf76aa",
            "9be1ec5c-7265-4ede-9418-d3d3fc0cfaed",
            "133c078d-5412-4a89-bd92-2b1091542b57",
            "bc6b83a9-af04-4573-a2ef-ce478c76113b",
            "038d0225-f6a0-4a7d-b8f1-6edc750fad52",
            "2f85e7eb-e42a-4414-9521-b83ff28db236",
            "29bb727a-892c-443e-a0dc-a74063e0a5fb",
            "5e723b07-abf5-413d-a7ad-50eff73ae89c",
            "5cadf925-4b3f-4715-9bc5-ac6b139f801d",
            "f0fa1a1f-14ee-429c-bfa7-174a011a1f49",
            "ae9e1f4f-e682-4ed4-a92c-7d0455d081e7",
            "35777501-f505-4f0f-a78d-311a89064288",
            "a33cd813-42eb-4ee4-8c7b-43234fbd4c41",
            "94649ef8-90da-4107-99c4-e3f686ab3f9d",
            "e4d417e0-dc81-4f5c-8f26-a21bf53f17a6",
            "18a601a2-5cb7-461c-a8e6-d42bec9dcafc",
            "6b7d2a60-94da-4db1-b196-ed83e68488c2",
            "2d9529b3-cfe6-4b54-8877-cc15d5d46656",
            "5a0e3f21-541a-499b-ad91-e370f31774b9",
            "2be71f1b-3add-4200-966a-88456b6032da",
            "1d533365-094b-468e-94f0-6b574d5c5dfa",
            "62ad7632-5391-420e-b84e-bb97eb3b49fb",
            "36f60dde-18ba-46c0-934b-2bbcf27c3915",
            "f62674dc-0ca9-4a74-842e-433409332fbd",
            "433ed866-b8ec-4c10-b550-912cec5fd8c0",
            "6d376fa9-c346-4edd-9b4a-0501e36efea1",
            "d08b7391-574a-4b0c-a783-2ebe8de35945",
            "6608112e-0ea2-43cb-a0f8-02dbb885aeba",
            "c894445f-5524-459a-8833-f50288cfe0ae",
            "5a9eecbf-89cf-47c9-aa1e-3bd5616df4b4",
            "a0f7555a-d765-42a7-af65-8ee8f2959ccb",
            "d5b06d1a-8f91-4d88-8c93-5940ae64935a",
            "2bb29201-6193-49fe-bdf4-55ac5ed6605c",
            "f5ad338b-d0e8-4a06-89b7-a49d3e3ead79",
            "bada6d8c-3c76-48b5-83d1-c7acf815cfb8",
            "2f613f5b-7993-4ee9-8265-714a9ca50ee9",
            "db6b61e8-d481-4a92-9880-5e0c9d693510",
            "580319c3-ea51-430a-bcba-0b5461a797ca",
            "ba5a52db-9ecd-42f3-880f-ce0bd7c39510",
            "b8b028dc-950b-4f27-b058-7c05e3f10f2e",
            "368bb48a-106b-42b6-a5c9-2d1da5da843b",
            "a1c5bf04-506d-4b0c-b47c-f3179b6dcecf",
            "b40ffb6d-22a2-4dc5-b266-bb25b1c6c990"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "index",
        "reportTitle": "JayStack OData V4 Parser"
      },
      "version": "5.2.0"
    }
  }
}